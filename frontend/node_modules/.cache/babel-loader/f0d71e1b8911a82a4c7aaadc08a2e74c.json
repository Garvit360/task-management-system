{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Task Management System\\\\frontend\\\\src\\\\context\\\\TaskContext.jsx\";\nimport React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\nimport { toast } from 'react-toastify';\nimport taskService from '../services/taskService';\n\n// Create context\nconst TaskContext = createContext(null);\nexport const TaskProvider = ({\n  children\n}) => {\n  const [tasks, setTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch all tasks or filter by project or user\n  const fetchTasks = useCallback(async (filters = {}) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await taskService.getTasks(filters);\n      setTasks(data);\n      return data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error fetching tasks:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch tasks');\n      toast.error('Failed to fetch tasks');\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch tasks by project ID\n  const fetchTasksByProject = useCallback(async projectId => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await taskService.getTasksByProject(projectId);\n      setTasks(data);\n      return data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error(`Error fetching tasks for project ${projectId}:`, error);\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch project tasks');\n      toast.error('Failed to fetch project tasks');\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch tasks by user ID\n  const fetchTasksByUser = useCallback(async userId => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await taskService.getTasksByUser(userId);\n      setTasks(data);\n      return data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error(`Error fetching tasks for user ${userId}:`, error);\n      setError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch user tasks');\n      toast.error('Failed to fetch user tasks');\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch a single task by ID\n  const fetchTask = useCallback(async taskId => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await taskService.getTask(taskId);\n      setCurrentTask(data);\n      return data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error(`Error fetching task ${taskId}:`, error);\n      setError(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch task');\n      toast.error('Failed to fetch task details');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create a new task\n  const createTask = useCallback(async taskData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await taskService.createTask(taskData);\n      setTasks(prevTasks => [...prevTasks, data]);\n      toast.success('Task created successfully!');\n      return data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Error creating task:', error);\n      setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to create task');\n      toast.error('Failed to create task');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Update a task\n  const updateTask = useCallback(async (taskId, taskData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await taskService.updateTask(taskId, taskData);\n\n      // Update tasks list\n      setTasks(prevTasks => prevTasks.map(task => task._id === taskId ? data : task));\n\n      // Update current task if it's the one being modified\n      if (currentTask && currentTask._id === taskId) {\n        setCurrentTask(data);\n      }\n      toast.success('Task updated successfully!');\n      return data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error(`Error updating task ${taskId}:`, error);\n      setError(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to update task');\n      toast.error('Failed to update task');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentTask]);\n\n  // Delete a task\n  const deleteTask = useCallback(async taskId => {\n    try {\n      setLoading(true);\n      setError(null);\n      await taskService.deleteTask(taskId);\n\n      // Remove from tasks list\n      setTasks(prevTasks => prevTasks.filter(task => task._id !== taskId));\n\n      // Clear current task if it's the one being deleted\n      if (currentTask && currentTask._id === taskId) {\n        setCurrentTask(null);\n      }\n      toast.success('Task deleted successfully!');\n      return true;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error(`Error deleting task ${taskId}:`, error);\n      setError(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to delete task');\n      toast.error('Failed to delete task');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentTask]);\n\n  // Add a comment to a task\n  const addComment = useCallback(async (taskId, comment) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await taskService.addComment(taskId, comment);\n\n      // Update current task if it's the one being modified\n      if (currentTask && currentTask._id === taskId) {\n        setCurrentTask(data);\n      }\n      toast.success('Comment added successfully!');\n      return data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      console.error(`Error adding comment to task ${taskId}:`, error);\n      setError(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to add comment');\n      toast.error('Failed to add comment');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentTask]);\n\n  // Upload attachment to a task\n  const uploadAttachment = useCallback(async (taskId, file) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await taskService.uploadAttachment(taskId, file);\n\n      // Update current task if it's the one being modified\n      if (currentTask && currentTask._id === taskId) {\n        setCurrentTask(data);\n      }\n      toast.success('File uploaded successfully!');\n      return data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      console.error(`Error uploading file to task ${taskId}:`, error);\n      setError(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to upload file');\n      toast.error('Failed to upload file');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentTask]);\n\n  // Delete attachment from a task\n  const deleteAttachment = useCallback(async (taskId, attachmentId) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await taskService.deleteAttachment(taskId, attachmentId);\n\n      // Update current task if it's the one being modified\n      if (currentTask && currentTask._id === taskId) {\n        setCurrentTask(data);\n      }\n      toast.success('Attachment deleted successfully!');\n      return data;\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      console.error(`Error deleting attachment from task ${taskId}:`, error);\n      setError(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to delete attachment');\n      toast.error('Failed to delete attachment');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentTask]);\n\n  // Memoize context value\n  const contextValue = useMemo(() => ({\n    tasks,\n    currentTask,\n    loading,\n    error,\n    fetchTasks,\n    fetchTasksByProject,\n    fetchTasksByUser,\n    fetchTask,\n    createTask,\n    updateTask,\n    deleteTask,\n    addComment,\n    uploadAttachment,\n    deleteAttachment\n  }), [tasks, currentTask, loading, error, fetchTasks, fetchTasksByProject, fetchTasksByUser, fetchTask, createTask, updateTask, deleteTask, addComment, uploadAttachment, deleteAttachment]);\n  return /*#__PURE__*/React.createElement(TaskContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }\n  }, children);\n};\n\n// Custom hook to use the task context\nexport const useTask = () => {\n  const context = useContext(TaskContext);\n  if (!context) {\n    throw new Error('useTask must be used within a TaskProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useMemo","toast","taskService","TaskContext","TaskProvider","children","tasks","setTasks","currentTask","setCurrentTask","loading","setLoading","error","setError","fetchTasks","filters","data","getTasks","_error$response","_error$response$data","console","response","message","fetchTasksByProject","projectId","getTasksByProject","_error$response2","_error$response2$data","fetchTasksByUser","userId","getTasksByUser","_error$response3","_error$response3$data","fetchTask","taskId","getTask","_error$response4","_error$response4$data","createTask","taskData","prevTasks","success","_error$response5","_error$response5$data","updateTask","map","task","_id","_error$response6","_error$response6$data","deleteTask","filter","_error$response7","_error$response7$data","addComment","comment","_error$response8","_error$response8$data","uploadAttachment","file","_error$response9","_error$response9$data","deleteAttachment","attachmentId","_error$response10","_error$response10$dat","contextValue","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useTask","context","Error"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/context/TaskContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport taskService from '../services/taskService';\r\n\r\n// Create context\r\nconst TaskContext = createContext(null);\r\n\r\nexport const TaskProvider = ({ children }) => {\r\n    const [tasks, setTasks] = useState([]);\r\n    const [currentTask, setCurrentTask] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Fetch all tasks or filter by project or user\r\n    const fetchTasks = useCallback(async (filters = {}) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await taskService.getTasks(filters);\r\n            setTasks(data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error fetching tasks:', error);\r\n            setError(error.response?.data?.message || 'Failed to fetch tasks');\r\n            toast.error('Failed to fetch tasks');\r\n            return [];\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Fetch tasks by project ID\r\n    const fetchTasksByProject = useCallback(async (projectId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await taskService.getTasksByProject(projectId);\r\n            setTasks(data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error fetching tasks for project ${projectId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to fetch project tasks');\r\n            toast.error('Failed to fetch project tasks');\r\n            return [];\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Fetch tasks by user ID\r\n    const fetchTasksByUser = useCallback(async (userId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await taskService.getTasksByUser(userId);\r\n            setTasks(data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error fetching tasks for user ${userId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to fetch user tasks');\r\n            toast.error('Failed to fetch user tasks');\r\n            return [];\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Fetch a single task by ID\r\n    const fetchTask = useCallback(async (taskId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await taskService.getTask(taskId);\r\n            setCurrentTask(data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error fetching task ${taskId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to fetch task');\r\n            toast.error('Failed to fetch task details');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Create a new task\r\n    const createTask = useCallback(async (taskData) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await taskService.createTask(taskData);\r\n            setTasks(prevTasks => [...prevTasks, data]);\r\n            toast.success('Task created successfully!');\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error creating task:', error);\r\n            setError(error.response?.data?.message || 'Failed to create task');\r\n            toast.error('Failed to create task');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Update a task\r\n    const updateTask = useCallback(async (taskId, taskData) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await taskService.updateTask(taskId, taskData);\r\n\r\n            // Update tasks list\r\n            setTasks(prevTasks =>\r\n                prevTasks.map(task =>\r\n                    task._id === taskId ? data : task\r\n                )\r\n            );\r\n\r\n            // Update current task if it's the one being modified\r\n            if (currentTask && currentTask._id === taskId) {\r\n                setCurrentTask(data);\r\n            }\r\n\r\n            toast.success('Task updated successfully!');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error updating task ${taskId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to update task');\r\n            toast.error('Failed to update task');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentTask]);\r\n\r\n    // Delete a task\r\n    const deleteTask = useCallback(async (taskId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            await taskService.deleteTask(taskId);\r\n\r\n            // Remove from tasks list\r\n            setTasks(prevTasks =>\r\n                prevTasks.filter(task => task._id !== taskId)\r\n            );\r\n\r\n            // Clear current task if it's the one being deleted\r\n            if (currentTask && currentTask._id === taskId) {\r\n                setCurrentTask(null);\r\n            }\r\n\r\n            toast.success('Task deleted successfully!');\r\n            return true;\r\n        } catch (error) {\r\n            console.error(`Error deleting task ${taskId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to delete task');\r\n            toast.error('Failed to delete task');\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentTask]);\r\n\r\n    // Add a comment to a task\r\n    const addComment = useCallback(async (taskId, comment) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await taskService.addComment(taskId, comment);\r\n\r\n            // Update current task if it's the one being modified\r\n            if (currentTask && currentTask._id === taskId) {\r\n                setCurrentTask(data);\r\n            }\r\n\r\n            toast.success('Comment added successfully!');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error adding comment to task ${taskId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to add comment');\r\n            toast.error('Failed to add comment');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentTask]);\r\n\r\n    // Upload attachment to a task\r\n    const uploadAttachment = useCallback(async (taskId, file) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await taskService.uploadAttachment(taskId, file);\r\n\r\n            // Update current task if it's the one being modified\r\n            if (currentTask && currentTask._id === taskId) {\r\n                setCurrentTask(data);\r\n            }\r\n\r\n            toast.success('File uploaded successfully!');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error uploading file to task ${taskId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to upload file');\r\n            toast.error('Failed to upload file');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentTask]);\r\n\r\n    // Delete attachment from a task\r\n    const deleteAttachment = useCallback(async (taskId, attachmentId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await taskService.deleteAttachment(taskId, attachmentId);\r\n\r\n            // Update current task if it's the one being modified\r\n            if (currentTask && currentTask._id === taskId) {\r\n                setCurrentTask(data);\r\n            }\r\n\r\n            toast.success('Attachment deleted successfully!');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error deleting attachment from task ${taskId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to delete attachment');\r\n            toast.error('Failed to delete attachment');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentTask]);\r\n\r\n    // Memoize context value\r\n    const contextValue = useMemo(() => ({\r\n        tasks,\r\n        currentTask,\r\n        loading,\r\n        error,\r\n        fetchTasks,\r\n        fetchTasksByProject,\r\n        fetchTasksByUser,\r\n        fetchTask,\r\n        createTask,\r\n        updateTask,\r\n        deleteTask,\r\n        addComment,\r\n        uploadAttachment,\r\n        deleteAttachment\r\n    }), [\r\n        tasks,\r\n        currentTask,\r\n        loading,\r\n        error,\r\n        fetchTasks,\r\n        fetchTasksByProject,\r\n        fetchTasksByUser,\r\n        fetchTask,\r\n        createTask,\r\n        updateTask,\r\n        deleteTask,\r\n        addComment,\r\n        uploadAttachment,\r\n        deleteAttachment\r\n    ]);\r\n\r\n    return (\r\n        <TaskContext.Provider value={contextValue}>\r\n            {children}\r\n        </TaskContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the task context\r\nexport const useTask = () => {\r\n    const context = useContext(TaskContext);\r\n    if (!context) {\r\n        throw new Error('useTask must be used within a TaskProvider');\r\n    }\r\n    return context;\r\n}; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AACxF,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,WAAW,MAAM,yBAAyB;;AAEjD;AACA,MAAMC,WAAW,GAAGP,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMgB,UAAU,GAAGf,WAAW,CAAC,OAAOgB,OAAO,GAAG,CAAC,CAAC,KAAK;IACnD,IAAI;MACAJ,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMG,IAAI,GAAG,MAAMd,WAAW,CAACe,QAAQ,CAACF,OAAO,CAAC;MAChDR,QAAQ,CAACS,IAAI,CAAC;MACd,OAAOA,IAAI;IACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAAM,eAAA,EAAAC,oBAAA;MACZC,OAAO,CAACR,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CC,QAAQ,CAAC,EAAAK,eAAA,GAAAN,KAAK,CAACS,QAAQ,cAAAH,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBG,OAAO,KAAI,uBAAuB,CAAC;MAClErB,KAAK,CAACW,KAAK,CAAC,uBAAuB,CAAC;MACpC,OAAO,EAAE;IACb,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,mBAAmB,GAAGxB,WAAW,CAAC,MAAOyB,SAAS,IAAK;IACzD,IAAI;MACAb,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMG,IAAI,GAAG,MAAMd,WAAW,CAACuB,iBAAiB,CAACD,SAAS,CAAC;MAC3DjB,QAAQ,CAACS,IAAI,CAAC;MACd,OAAOA,IAAI;IACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAAc,gBAAA,EAAAC,qBAAA;MACZP,OAAO,CAACR,KAAK,CAAC,oCAAoCY,SAAS,GAAG,EAAEZ,KAAK,CAAC;MACtEC,QAAQ,CAAC,EAAAa,gBAAA,GAAAd,KAAK,CAACS,QAAQ,cAAAK,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBV,IAAI,cAAAW,qBAAA,uBAApBA,qBAAA,CAAsBL,OAAO,KAAI,+BAA+B,CAAC;MAC1ErB,KAAK,CAACW,KAAK,CAAC,+BAA+B,CAAC;MAC5C,OAAO,EAAE;IACb,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMiB,gBAAgB,GAAG7B,WAAW,CAAC,MAAO8B,MAAM,IAAK;IACnD,IAAI;MACAlB,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMG,IAAI,GAAG,MAAMd,WAAW,CAAC4B,cAAc,CAACD,MAAM,CAAC;MACrDtB,QAAQ,CAACS,IAAI,CAAC;MACd,OAAOA,IAAI;IACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAAmB,gBAAA,EAAAC,qBAAA;MACZZ,OAAO,CAACR,KAAK,CAAC,iCAAiCiB,MAAM,GAAG,EAAEjB,KAAK,CAAC;MAChEC,QAAQ,CAAC,EAAAkB,gBAAA,GAAAnB,KAAK,CAACS,QAAQ,cAAAU,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBf,IAAI,cAAAgB,qBAAA,uBAApBA,qBAAA,CAAsBV,OAAO,KAAI,4BAA4B,CAAC;MACvErB,KAAK,CAACW,KAAK,CAAC,4BAA4B,CAAC;MACzC,OAAO,EAAE;IACb,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMsB,SAAS,GAAGlC,WAAW,CAAC,MAAOmC,MAAM,IAAK;IAC5C,IAAI;MACAvB,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMG,IAAI,GAAG,MAAMd,WAAW,CAACiC,OAAO,CAACD,MAAM,CAAC;MAC9CzB,cAAc,CAACO,IAAI,CAAC;MACpB,OAAOA,IAAI;IACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAAwB,gBAAA,EAAAC,qBAAA;MACZjB,OAAO,CAACR,KAAK,CAAC,uBAAuBsB,MAAM,GAAG,EAAEtB,KAAK,CAAC;MACtDC,QAAQ,CAAC,EAAAuB,gBAAA,GAAAxB,KAAK,CAACS,QAAQ,cAAAe,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBpB,IAAI,cAAAqB,qBAAA,uBAApBA,qBAAA,CAAsBf,OAAO,KAAI,sBAAsB,CAAC;MACjErB,KAAK,CAACW,KAAK,CAAC,8BAA8B,CAAC;MAC3C,OAAO,IAAI;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM2B,UAAU,GAAGvC,WAAW,CAAC,MAAOwC,QAAQ,IAAK;IAC/C,IAAI;MACA5B,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMG,IAAI,GAAG,MAAMd,WAAW,CAACoC,UAAU,CAACC,QAAQ,CAAC;MACnDhC,QAAQ,CAACiC,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAExB,IAAI,CAAC,CAAC;MAC3Cf,KAAK,CAACwC,OAAO,CAAC,4BAA4B,CAAC;MAC3C,OAAOzB,IAAI;IACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAA8B,gBAAA,EAAAC,qBAAA;MACZvB,OAAO,CAACR,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CC,QAAQ,CAAC,EAAA6B,gBAAA,GAAA9B,KAAK,CAACS,QAAQ,cAAAqB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB1B,IAAI,cAAA2B,qBAAA,uBAApBA,qBAAA,CAAsBrB,OAAO,KAAI,uBAAuB,CAAC;MAClErB,KAAK,CAACW,KAAK,CAAC,uBAAuB,CAAC;MACpC,OAAO,IAAI;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMiC,UAAU,GAAG7C,WAAW,CAAC,OAAOmC,MAAM,EAAEK,QAAQ,KAAK;IACvD,IAAI;MACA5B,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMG,IAAI,GAAG,MAAMd,WAAW,CAAC0C,UAAU,CAACV,MAAM,EAAEK,QAAQ,CAAC;;MAE3D;MACAhC,QAAQ,CAACiC,SAAS,IACdA,SAAS,CAACK,GAAG,CAACC,IAAI,IACdA,IAAI,CAACC,GAAG,KAAKb,MAAM,GAAGlB,IAAI,GAAG8B,IACjC,CACJ,CAAC;;MAED;MACA,IAAItC,WAAW,IAAIA,WAAW,CAACuC,GAAG,KAAKb,MAAM,EAAE;QAC3CzB,cAAc,CAACO,IAAI,CAAC;MACxB;MAEAf,KAAK,CAACwC,OAAO,CAAC,4BAA4B,CAAC;MAC3C,OAAOzB,IAAI;IACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAAoC,gBAAA,EAAAC,qBAAA;MACZ7B,OAAO,CAACR,KAAK,CAAC,uBAAuBsB,MAAM,GAAG,EAAEtB,KAAK,CAAC;MACtDC,QAAQ,CAAC,EAAAmC,gBAAA,GAAApC,KAAK,CAACS,QAAQ,cAAA2B,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBhC,IAAI,cAAAiC,qBAAA,uBAApBA,qBAAA,CAAsB3B,OAAO,KAAI,uBAAuB,CAAC;MAClErB,KAAK,CAACW,KAAK,CAAC,uBAAuB,CAAC;MACpC,OAAO,IAAI;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACH,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAM0C,UAAU,GAAGnD,WAAW,CAAC,MAAOmC,MAAM,IAAK;IAC7C,IAAI;MACAvB,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMX,WAAW,CAACgD,UAAU,CAAChB,MAAM,CAAC;;MAEpC;MACA3B,QAAQ,CAACiC,SAAS,IACdA,SAAS,CAACW,MAAM,CAACL,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKb,MAAM,CAChD,CAAC;;MAED;MACA,IAAI1B,WAAW,IAAIA,WAAW,CAACuC,GAAG,KAAKb,MAAM,EAAE;QAC3CzB,cAAc,CAAC,IAAI,CAAC;MACxB;MAEAR,KAAK,CAACwC,OAAO,CAAC,4BAA4B,CAAC;MAC3C,OAAO,IAAI;IACf,CAAC,CAAC,OAAO7B,KAAK,EAAE;MAAA,IAAAwC,gBAAA,EAAAC,qBAAA;MACZjC,OAAO,CAACR,KAAK,CAAC,uBAAuBsB,MAAM,GAAG,EAAEtB,KAAK,CAAC;MACtDC,QAAQ,CAAC,EAAAuC,gBAAA,GAAAxC,KAAK,CAACS,QAAQ,cAAA+B,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBpC,IAAI,cAAAqC,qBAAA,uBAApBA,qBAAA,CAAsB/B,OAAO,KAAI,uBAAuB,CAAC;MAClErB,KAAK,CAACW,KAAK,CAAC,uBAAuB,CAAC;MACpC,OAAO,KAAK;IAChB,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACH,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAM8C,UAAU,GAAGvD,WAAW,CAAC,OAAOmC,MAAM,EAAEqB,OAAO,KAAK;IACtD,IAAI;MACA5C,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMG,IAAI,GAAG,MAAMd,WAAW,CAACoD,UAAU,CAACpB,MAAM,EAAEqB,OAAO,CAAC;;MAE1D;MACA,IAAI/C,WAAW,IAAIA,WAAW,CAACuC,GAAG,KAAKb,MAAM,EAAE;QAC3CzB,cAAc,CAACO,IAAI,CAAC;MACxB;MAEAf,KAAK,CAACwC,OAAO,CAAC,6BAA6B,CAAC;MAC5C,OAAOzB,IAAI;IACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAA4C,gBAAA,EAAAC,qBAAA;MACZrC,OAAO,CAACR,KAAK,CAAC,gCAAgCsB,MAAM,GAAG,EAAEtB,KAAK,CAAC;MAC/DC,QAAQ,CAAC,EAAA2C,gBAAA,GAAA5C,KAAK,CAACS,QAAQ,cAAAmC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBxC,IAAI,cAAAyC,qBAAA,uBAApBA,qBAAA,CAAsBnC,OAAO,KAAI,uBAAuB,CAAC;MAClErB,KAAK,CAACW,KAAK,CAAC,uBAAuB,CAAC;MACpC,OAAO,IAAI;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACH,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMkD,gBAAgB,GAAG3D,WAAW,CAAC,OAAOmC,MAAM,EAAEyB,IAAI,KAAK;IACzD,IAAI;MACAhD,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMG,IAAI,GAAG,MAAMd,WAAW,CAACwD,gBAAgB,CAACxB,MAAM,EAAEyB,IAAI,CAAC;;MAE7D;MACA,IAAInD,WAAW,IAAIA,WAAW,CAACuC,GAAG,KAAKb,MAAM,EAAE;QAC3CzB,cAAc,CAACO,IAAI,CAAC;MACxB;MAEAf,KAAK,CAACwC,OAAO,CAAC,6BAA6B,CAAC;MAC5C,OAAOzB,IAAI;IACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAAgD,gBAAA,EAAAC,qBAAA;MACZzC,OAAO,CAACR,KAAK,CAAC,gCAAgCsB,MAAM,GAAG,EAAEtB,KAAK,CAAC;MAC/DC,QAAQ,CAAC,EAAA+C,gBAAA,GAAAhD,KAAK,CAACS,QAAQ,cAAAuC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB5C,IAAI,cAAA6C,qBAAA,uBAApBA,qBAAA,CAAsBvC,OAAO,KAAI,uBAAuB,CAAC;MAClErB,KAAK,CAACW,KAAK,CAAC,uBAAuB,CAAC;MACpC,OAAO,IAAI;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACH,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMsD,gBAAgB,GAAG/D,WAAW,CAAC,OAAOmC,MAAM,EAAE6B,YAAY,KAAK;IACjE,IAAI;MACApD,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMG,IAAI,GAAG,MAAMd,WAAW,CAAC4D,gBAAgB,CAAC5B,MAAM,EAAE6B,YAAY,CAAC;;MAErE;MACA,IAAIvD,WAAW,IAAIA,WAAW,CAACuC,GAAG,KAAKb,MAAM,EAAE;QAC3CzB,cAAc,CAACO,IAAI,CAAC;MACxB;MAEAf,KAAK,CAACwC,OAAO,CAAC,kCAAkC,CAAC;MACjD,OAAOzB,IAAI;IACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;MAAA,IAAAoD,iBAAA,EAAAC,qBAAA;MACZ7C,OAAO,CAACR,KAAK,CAAC,uCAAuCsB,MAAM,GAAG,EAAEtB,KAAK,CAAC;MACtEC,QAAQ,CAAC,EAAAmD,iBAAA,GAAApD,KAAK,CAACS,QAAQ,cAAA2C,iBAAA,wBAAAC,qBAAA,GAAdD,iBAAA,CAAgBhD,IAAI,cAAAiD,qBAAA,uBAApBA,qBAAA,CAAsB3C,OAAO,KAAI,6BAA6B,CAAC;MACxErB,KAAK,CAACW,KAAK,CAAC,6BAA6B,CAAC;MAC1C,OAAO,IAAI;IACf,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACH,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAM0D,YAAY,GAAGlE,OAAO,CAAC,OAAO;IAChCM,KAAK;IACLE,WAAW;IACXE,OAAO;IACPE,KAAK;IACLE,UAAU;IACVS,mBAAmB;IACnBK,gBAAgB;IAChBK,SAAS;IACTK,UAAU;IACVM,UAAU;IACVM,UAAU;IACVI,UAAU;IACVI,gBAAgB;IAChBI;EACJ,CAAC,CAAC,EAAE,CACAxD,KAAK,EACLE,WAAW,EACXE,OAAO,EACPE,KAAK,EACLE,UAAU,EACVS,mBAAmB,EACnBK,gBAAgB,EAChBK,SAAS,EACTK,UAAU,EACVM,UAAU,EACVM,UAAU,EACVI,UAAU,EACVI,gBAAgB,EAChBI,gBAAgB,CACnB,CAAC;EAEF,oBACInE,KAAA,CAAAwE,aAAA,CAAChE,WAAW,CAACiE,QAAQ;IAACC,KAAK,EAAEH,YAAa;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACrCtE,QACiB,CAAC;AAE/B,CAAC;;AAED;AACA,OAAO,MAAMuE,OAAO,GAAGA,CAAA,KAAM;EACzB,MAAMC,OAAO,GAAGhF,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAAC0E,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EACjE;EACA,OAAOD,OAAO;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
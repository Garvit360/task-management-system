{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false,\n  // Set to false as we're using JWT in Authorization header\n  timeout: 30000 // Increase timeout to 30 seconds\n});\n\n// Add request interceptor for authentication\napi.interceptors.request.use(config => {\n  console.log(`${config.method.toUpperCase()} request to ${config.url}`);\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`Response from ${response.config.url}:`, response.data);\n\n  // Check if the response is a successful response with data property\n  if (response.data && response.data.success === true) {\n    // Return standardized response data\n    return response.data.data || response.data;\n  }\n\n  // If for some reason we get a success HTTP status but success flag is false\n  if (response.data && response.data.success === false) {\n    const error = new Error(response.data.message || 'Operation failed');\n    error.response = response;\n    return Promise.reject(error);\n  }\n  return response.data;\n}, async error => {\n  var _error$response, _error$response2, _error$response2$data;\n  const originalRequest = error.config;\n\n  // Handle network errors\n  if (!error.response) {\n    console.error('Network Error:', error.message);\n    return Promise.reject({\n      status: 'network_error',\n      message: 'Unable to connect to the server. Please check your internet connection.'\n    });\n  }\n\n  // Handle authentication errors\n  if (error.response.status === 401) {\n    console.log('Unauthorized - current path:', window.location.pathname);\n    // If token is invalid or expired and this wasn't already a retry\n    if (!originalRequest._retry) {\n      // Clear token from storage\n      localStorage.removeItem('token');\n\n      // Redirect to login if not already there\n      if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {\n        window.location.href = '/login';\n      }\n    }\n  }\n\n  // Extract error message from response\n  let errorMessage = 'An unexpected error occurred';\n  if (error.response.data && error.response.data.message) {\n    errorMessage = error.response.data.message;\n  } else if (error.response.data && error.response.data.error) {\n    errorMessage = error.response.data.error;\n  } else if (typeof error.response.data === 'string') {\n    errorMessage = error.response.data;\n  }\n\n  // Create a standardized error object\n  const errorResponse = {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: errorMessage,\n    errors: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errors,\n    response: error.response\n  };\n  console.error('API Error:', errorResponse);\n  return Promise.reject(errorResponse);\n});\n\n// Helper function for retrying requests\napi.retryRequest = async (fn, maxRetries = 3, delay = 1000) => {\n  let lastError;\n  console.log(`Setting up retry logic with ${maxRetries} retries and ${delay}ms delay`);\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      console.log(`Attempt ${attempt + 1} of ${maxRetries}`);\n      const result = await fn();\n      console.log(`Attempt ${attempt + 1} successful`);\n      return result;\n    } catch (error) {\n      lastError = error;\n      console.error(`Attempt ${attempt + 1} failed:`, error);\n\n      // Only retry on network errors or 5xx server errors\n      if (!error.response || error.response.status >= 500 && error.response.status < 600) {\n        console.log(`Waiting ${delay}ms before retry...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        continue;\n      }\n      break;\n    }\n  }\n  console.error(`All ${maxRetries} attempts failed`);\n  throw lastError;\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","withCredentials","timeout","interceptors","request","use","config","console","log","method","toUpperCase","url","token","localStorage","getItem","Authorization","error","Promise","reject","response","data","success","Error","message","_error$response","_error$response2","_error$response2$data","originalRequest","status","window","location","pathname","_retry","removeItem","href","errorMessage","errorResponse","errors","retryRequest","fn","maxRetries","delay","lastError","attempt","result","resolve","setTimeout"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:5000/api',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    withCredentials: false,  // Set to false as we're using JWT in Authorization header\r\n    timeout: 30000 // Increase timeout to 30 seconds\r\n});\r\n\r\n// Add request interceptor for authentication\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        console.log(`${config.method.toUpperCase()} request to ${config.url}`);\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('Request error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Add response interceptor for error handling\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        console.log(`Response from ${response.config.url}:`, response.data);\r\n\r\n        // Check if the response is a successful response with data property\r\n        if (response.data && response.data.success === true) {\r\n            // Return standardized response data\r\n            return response.data.data || response.data;\r\n        }\r\n\r\n        // If for some reason we get a success HTTP status but success flag is false\r\n        if (response.data && response.data.success === false) {\r\n            const error = new Error(response.data.message || 'Operation failed');\r\n            error.response = response;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return response.data;\r\n    },\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        // Handle network errors\r\n        if (!error.response) {\r\n            console.error('Network Error:', error.message);\r\n            return Promise.reject({\r\n                status: 'network_error',\r\n                message: 'Unable to connect to the server. Please check your internet connection.',\r\n            });\r\n        }\r\n\r\n        // Handle authentication errors\r\n        if (error.response.status === 401) {\r\n            console.log('Unauthorized - current path:', window.location.pathname);\r\n            // If token is invalid or expired and this wasn't already a retry\r\n            if (!originalRequest._retry) {\r\n                // Clear token from storage\r\n                localStorage.removeItem('token');\r\n\r\n                // Redirect to login if not already there\r\n                if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {\r\n                    window.location.href = '/login';\r\n                }\r\n            }\r\n        }\r\n\r\n        // Extract error message from response\r\n        let errorMessage = 'An unexpected error occurred';\r\n        if (error.response.data && error.response.data.message) {\r\n            errorMessage = error.response.data.message;\r\n        } else if (error.response.data && error.response.data.error) {\r\n            errorMessage = error.response.data.error;\r\n        } else if (typeof error.response.data === 'string') {\r\n            errorMessage = error.response.data;\r\n        }\r\n\r\n        // Create a standardized error object\r\n        const errorResponse = {\r\n            status: error.response?.status,\r\n            message: errorMessage,\r\n            errors: error.response?.data?.errors,\r\n            response: error.response\r\n        };\r\n\r\n        console.error('API Error:', errorResponse);\r\n\r\n        return Promise.reject(errorResponse);\r\n    }\r\n);\r\n\r\n// Helper function for retrying requests\r\napi.retryRequest = async (fn, maxRetries = 3, delay = 1000) => {\r\n    let lastError;\r\n    console.log(`Setting up retry logic with ${maxRetries} retries and ${delay}ms delay`);\r\n\r\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\r\n        try {\r\n            console.log(`Attempt ${attempt + 1} of ${maxRetries}`);\r\n            const result = await fn();\r\n            console.log(`Attempt ${attempt + 1} successful`);\r\n            return result;\r\n        } catch (error) {\r\n            lastError = error;\r\n            console.error(`Attempt ${attempt + 1} failed:`, error);\r\n\r\n            // Only retry on network errors or 5xx server errors\r\n            if (!error.response || (error.response.status >= 500 && error.response.status < 600)) {\r\n                console.log(`Waiting ${delay}ms before retry...`);\r\n                await new Promise(resolve => setTimeout(resolve, delay));\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    console.error(`All ${maxRetries} attempts failed`);\r\n    throw lastError;\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
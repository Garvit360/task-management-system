{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Task Management System\\\\frontend\\\\src\\\\context\\\\ProjectContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport projectService from '../services/projectService';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectContext = /*#__PURE__*/createContext(null);\nexport const ProjectProvider = ({\n  children\n}) => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [project, setProject] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Fetch all projects\n  const fetchProjects = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.getProjects();\n      setProjects(data);\n      return data;\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n      setError(error.message || 'Failed to fetch projects');\n      toast.error('Failed to fetch projects');\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch single project by ID\n  const fetchProject = useCallback(async projectId => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.getProjectById(projectId);\n      setProject(data);\n      return data;\n    } catch (error) {\n      console.error(`Error fetching project ${projectId}:`, error);\n      setError(error.message || 'Failed to fetch project');\n      toast.error('Failed to fetch project details');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create a new project\n  const createProject = useCallback(async projectData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.createProject(projectData);\n      setProjects(prev => [...prev, data]);\n      toast.success('Project created successfully');\n      return data;\n    } catch (error) {\n      console.error('Error creating project:', error);\n      setError(error.message || 'Failed to create project');\n      toast.error('Failed to create project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Update an existing project\n  const updateProject = useCallback(async (projectId, projectData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.updateProject(projectId, projectData);\n\n      // Update local state\n      setProject(data);\n      setProjects(prev => prev.map(p => p._id === projectId ? data : p));\n      toast.success('Project updated successfully');\n      return data;\n    } catch (error) {\n      console.error(`Error updating project ${projectId}:`, error);\n      setError(error.message || 'Failed to update project');\n      toast.error('Failed to update project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Delete a project\n  const deleteProject = useCallback(async projectId => {\n    try {\n      setLoading(true);\n      setError(null);\n      await projectService.deleteProject(projectId);\n\n      // Update local state\n      setProjects(prev => prev.filter(p => p._id !== projectId));\n      toast.success('Project deleted successfully');\n      navigate('/projects');\n      return true;\n    } catch (error) {\n      console.error(`Error deleting project ${projectId}:`, error);\n      setError(error.message || 'Failed to delete project');\n      toast.error('Failed to delete project');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Add member to a project\n  const addMemberToProject = useCallback(async (projectId, email) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.addMember(projectId, {\n        email\n      });\n\n      // Update local state\n      setProject(data);\n      setProjects(prev => prev.map(p => p._id === projectId ? data : p));\n      toast.success('Member added to project');\n      return data;\n    } catch (error) {\n      console.error(`Error adding member to project ${projectId}:`, error);\n      setError(error.message || 'Failed to add member');\n      toast.error('Failed to add member to project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Remove member from a project\n  const removeMemberFromProject = useCallback(async (projectId, userId) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.removeMember(projectId, userId);\n\n      // Update local state\n      setProject(data);\n      setProjects(prev => prev.map(p => p._id === projectId ? data : p));\n      toast.success('Member removed from project');\n      return data;\n    } catch (error) {\n      console.error(`Error removing member from project ${projectId}:`, error);\n      setError(error.message || 'Failed to remove member');\n      toast.error('Failed to remove member from project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Memoize context value\n  const contextValue = useMemo(() => ({\n    projects,\n    project,\n    loading,\n    error,\n    fetchProjects,\n    fetchProject,\n    createProject,\n    updateProject,\n    deleteProject,\n    addMemberToProject,\n    removeMemberFromProject\n  }), [projects, project, loading, error, fetchProjects, fetchProject, createProject, updateProject, deleteProject, addMemberToProject, removeMemberFromProject]);\n  return /*#__PURE__*/_jsxDEV(ProjectContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the project context\n_s(ProjectProvider, \"VmPr9RHjMv98TgZ1bKvxIOLDEDs=\", false, function () {\n  return [useNavigate];\n});\n_c = ProjectProvider;\nexport const useProject = () => {\n  _s2();\n  const context = useContext(ProjectContext);\n  if (!context) {\n    throw new Error('useProject must be used within a ProjectProvider');\n  }\n  return context;\n};\n_s2(useProject, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ProjectProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useMemo","useNavigate","toast","projectService","jsxDEV","_jsxDEV","ProjectContext","ProjectProvider","children","_s","projects","setProjects","project","setProject","loading","setLoading","error","setError","navigate","fetchProjects","data","getProjects","console","message","fetchProject","projectId","getProjectById","createProject","projectData","prev","success","updateProject","map","p","_id","deleteProject","filter","addMemberToProject","email","addMember","removeMemberFromProject","userId","removeMember","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useProject","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/context/ProjectContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport projectService from '../services/projectService';\r\n\r\n// Create context\r\nconst ProjectContext = createContext(null);\r\n\r\nexport const ProjectProvider = ({ children }) => {\r\n    const [projects, setProjects] = useState([]);\r\n    const [project, setProject] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    // Fetch all projects\r\n    const fetchProjects = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.getProjects();\r\n            setProjects(data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error fetching projects:', error);\r\n            setError(error.message || 'Failed to fetch projects');\r\n            toast.error('Failed to fetch projects');\r\n            return [];\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Fetch single project by ID\r\n    const fetchProject = useCallback(async (projectId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.getProjectById(projectId);\r\n            setProject(data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error fetching project ${projectId}:`, error);\r\n            setError(error.message || 'Failed to fetch project');\r\n            toast.error('Failed to fetch project details');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Create a new project\r\n    const createProject = useCallback(async (projectData) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.createProject(projectData);\r\n            setProjects(prev => [...prev, data]);\r\n            toast.success('Project created successfully');\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error creating project:', error);\r\n            setError(error.message || 'Failed to create project');\r\n            toast.error('Failed to create project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Update an existing project\r\n    const updateProject = useCallback(async (projectId, projectData) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.updateProject(projectId, projectData);\r\n\r\n            // Update local state\r\n            setProject(data);\r\n            setProjects(prev =>\r\n                prev.map(p => p._id === projectId ? data : p)\r\n            );\r\n\r\n            toast.success('Project updated successfully');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error updating project ${projectId}:`, error);\r\n            setError(error.message || 'Failed to update project');\r\n            toast.error('Failed to update project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Delete a project\r\n    const deleteProject = useCallback(async (projectId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            await projectService.deleteProject(projectId);\r\n\r\n            // Update local state\r\n            setProjects(prev => prev.filter(p => p._id !== projectId));\r\n\r\n            toast.success('Project deleted successfully');\r\n            navigate('/projects');\r\n            return true;\r\n        } catch (error) {\r\n            console.error(`Error deleting project ${projectId}:`, error);\r\n            setError(error.message || 'Failed to delete project');\r\n            toast.error('Failed to delete project');\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Add member to a project\r\n    const addMemberToProject = useCallback(async (projectId, email) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.addMember(projectId, { email });\r\n            \r\n            // Update local state\r\n            setProject(data);\r\n            setProjects(prev => \r\n                prev.map(p => p._id === projectId ? data : p)\r\n            );\r\n            \r\n            toast.success('Member added to project');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error adding member to project ${projectId}:`, error);\r\n            setError(error.message || 'Failed to add member');\r\n            toast.error('Failed to add member to project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Remove member from a project\r\n    const removeMemberFromProject = useCallback(async (projectId, userId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.removeMember(projectId, userId);\r\n            \r\n            // Update local state\r\n            setProject(data);\r\n            setProjects(prev => \r\n                prev.map(p => p._id === projectId ? data : p)\r\n            );\r\n            \r\n            toast.success('Member removed from project');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error removing member from project ${projectId}:`, error);\r\n            setError(error.message || 'Failed to remove member');\r\n            toast.error('Failed to remove member from project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Memoize context value\r\n    const contextValue = useMemo(() => ({\r\n        projects,\r\n        project,\r\n        loading,\r\n        error,\r\n        fetchProjects,\r\n        fetchProject,\r\n        createProject,\r\n        updateProject,\r\n        deleteProject,\r\n        addMemberToProject,\r\n        removeMemberFromProject\r\n    }), [\r\n        projects,\r\n        project,\r\n        loading,\r\n        error,\r\n        fetchProjects,\r\n        fetchProject,\r\n        createProject,\r\n        updateProject,\r\n        deleteProject,\r\n        addMemberToProject,\r\n        removeMemberFromProject\r\n    ]);\r\n\r\n    return (\r\n        <ProjectContext.Provider value={contextValue}>\r\n            {children}\r\n        </ProjectContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the project context\r\nexport const useProject = () => {\r\n    const context = useContext(ProjectContext);\r\n    if (!context) {\r\n        throw new Error('useProject must be used within a ProjectProvider');\r\n    }\r\n    return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import api from './api';\n\n/**\n * Service for project related API calls\n */\nconst projectService = {\n  /**\n   * Get all projects\n   * @returns {Promise<Array>} List of projects\n   */\n  getProjects: async () => {\n    return await api.get('/projects');\n  },\n  /**\n   * Get a specific project by ID\n   * @param {string} projectId - Project ID\n   * @returns {Promise<Object>} Project data\n   */\n  getProject: async projectId => {\n    return await api.get(`/projects/${projectId}`);\n  },\n  /**\n   * Create a new project\n   * @param {Object} projectData - Project data\n   * @returns {Promise<Object>} Created project\n   */\n  createProject: async projectData => {\n    return await api.post('/projects', projectData);\n  },\n  /**\n   * Update a project\n   * @param {string} projectId - Project ID\n   * @param {Object} projectData - Updated project data\n   * @returns {Promise<Object>} Updated project\n   */\n  updateProject: async (projectId, projectData) => {\n    return await api.put(`/projects/${projectId}`, projectData);\n  },\n  /**\n   * Delete a project\n   * @param {string} projectId - Project ID\n   * @returns {Promise<Object>} Success message\n   */\n  deleteProject: async projectId => {\n    return await api.delete(`/projects/${projectId}`);\n  },\n  /**\n   * Add a member to a project\n   * @param {string} projectId - Project ID\n   * @param {string} userId - User ID to add\n   * @returns {Promise<Object>} Updated project\n   */\n  addProjectMember: async (projectId, userId) => {\n    return await api.post(`/projects/${projectId}/members`, {\n      userId\n    });\n  },\n  /**\n   * Remove a member from a project\n   * @param {string} projectId - Project ID\n   * @param {string} userId - User ID to remove\n   * @returns {Promise<Object>} Updated project\n   */\n  removeProjectMember: async (projectId, userId) => {\n    return await api.delete(`/projects/${projectId}/members/${userId}`);\n  }\n};\nexport default projectService;","map":{"version":3,"names":["api","projectService","getProjects","get","getProject","projectId","createProject","projectData","post","updateProject","put","deleteProject","delete","addProjectMember","userId","removeProjectMember"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/services/projectService.js"],"sourcesContent":["import api from './api';\n\n/**\n * Service for project related API calls\n */\nconst projectService = {\n    /**\n     * Get all projects\n     * @returns {Promise<Array>} List of projects\n     */\n    getProjects: async () => {\n        return await api.get('/projects');\n    },\n\n    /**\n     * Get a specific project by ID\n     * @param {string} projectId - Project ID\n     * @returns {Promise<Object>} Project data\n     */\n    getProject: async (projectId) => {\n        return await api.get(`/projects/${projectId}`);\n    },\n\n    /**\n     * Create a new project\n     * @param {Object} projectData - Project data\n     * @returns {Promise<Object>} Created project\n     */\n    createProject: async (projectData) => {\n        return await api.post('/projects', projectData);\n    },\n\n    /**\n     * Update a project\n     * @param {string} projectId - Project ID\n     * @param {Object} projectData - Updated project data\n     * @returns {Promise<Object>} Updated project\n     */\n    updateProject: async (projectId, projectData) => {\n        return await api.put(`/projects/${projectId}`, projectData);\n    },\n\n    /**\n     * Delete a project\n     * @param {string} projectId - Project ID\n     * @returns {Promise<Object>} Success message\n     */\n    deleteProject: async (projectId) => {\n        return await api.delete(`/projects/${projectId}`);\n    },\n\n    /**\n     * Add a member to a project\n     * @param {string} projectId - Project ID\n     * @param {string} userId - User ID to add\n     * @returns {Promise<Object>} Updated project\n     */\n    addProjectMember: async (projectId, userId) => {\n        return await api.post(`/projects/${projectId}/members`, { userId });\n    },\n\n    /**\n     * Remove a member from a project\n     * @param {string} projectId - Project ID\n     * @param {string} userId - User ID to remove\n     * @returns {Promise<Object>} Updated project\n     */\n    removeProjectMember: async (projectId, userId) => {\n        return await api.delete(`/projects/${projectId}/members/${userId}`);\n    }\n};\n\nexport default projectService; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACnB;AACJ;AACA;AACA;EACIC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACrB,OAAO,MAAMF,GAAG,CAACG,GAAG,CAAC,WAAW,CAAC;EACrC,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIC,UAAU,EAAE,MAAOC,SAAS,IAAK;IAC7B,OAAO,MAAML,GAAG,CAACG,GAAG,CAAC,aAAaE,SAAS,EAAE,CAAC;EAClD,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIC,aAAa,EAAE,MAAOC,WAAW,IAAK;IAClC,OAAO,MAAMP,GAAG,CAACQ,IAAI,CAAC,WAAW,EAAED,WAAW,CAAC;EACnD,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIE,aAAa,EAAE,MAAAA,CAAOJ,SAAS,EAAEE,WAAW,KAAK;IAC7C,OAAO,MAAMP,GAAG,CAACU,GAAG,CAAC,aAAaL,SAAS,EAAE,EAAEE,WAAW,CAAC;EAC/D,CAAC;EAED;AACJ;AACA;AACA;AACA;EACII,aAAa,EAAE,MAAON,SAAS,IAAK;IAChC,OAAO,MAAML,GAAG,CAACY,MAAM,CAAC,aAAaP,SAAS,EAAE,CAAC;EACrD,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIQ,gBAAgB,EAAE,MAAAA,CAAOR,SAAS,EAAES,MAAM,KAAK;IAC3C,OAAO,MAAMd,GAAG,CAACQ,IAAI,CAAC,aAAaH,SAAS,UAAU,EAAE;MAAES;IAAO,CAAC,CAAC;EACvE,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIC,mBAAmB,EAAE,MAAAA,CAAOV,SAAS,EAAES,MAAM,KAAK;IAC9C,OAAO,MAAMd,GAAG,CAACY,MAAM,CAAC,aAAaP,SAAS,YAAYS,MAAM,EAAE,CAAC;EACvE;AACJ,CAAC;AAED,eAAeb,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
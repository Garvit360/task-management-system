{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false\n});\n\n// Add request interceptor for authentication\napi.interceptors.request.use(config => {\n  console.log(`API Request: ${config.method.toUpperCase()} ${config.url}`, config.data);\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`API Response from ${response.config.url}:`, response.data);\n\n  // For most successful responses, just return the data\n  return response.data;\n}, error => {\n  if (!error.response) {\n    console.error('Network Error:', error.message);\n    return Promise.reject({\n      status: 'network_error',\n      message: 'Unable to connect to the server. Please check your internet connection.'\n    });\n  }\n  console.error(`API Error (${error.response.status}) from ${error.config.url}:`, error.response.data);\n\n  // Handle authentication errors\n  if (error.response.status === 401) {\n    localStorage.removeItem('token');\n    if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error.response.data || {\n    message: 'An unexpected error occurred'\n  });\n});\n\n// Simple API methods\nconst apiService = {\n  // GET request\n  get: async (url, config = {}) => {\n    try {\n      const response = await api.get(url, config);\n      return response;\n    } catch (error) {\n      console.error(`GET ${url} failed:`, error);\n      throw error;\n    }\n  },\n  // POST request\n  post: async (url, data = {}, config = {}) => {\n    try {\n      const response = await api.post(url, data, config);\n      return response;\n    } catch (error) {\n      console.error(`POST ${url} failed:`, error);\n      throw error;\n    }\n  },\n  // PUT request\n  put: async (url, data = {}, config = {}) => {\n    try {\n      const response = await api.put(url, data, config);\n      return response;\n    } catch (error) {\n      console.error(`PUT ${url} failed:`, error);\n      throw error;\n    }\n  },\n  // DELETE request\n  delete: async (url, config = {}) => {\n    try {\n      const response = await api.delete(url, config);\n      return response;\n    } catch (error) {\n      console.error(`DELETE ${url} failed:`, error);\n      throw error;\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","console","log","method","toUpperCase","url","data","token","localStorage","getItem","Authorization","error","Promise","reject","response","message","status","removeItem","window","location","pathname","href","apiService","get","post","put","delete"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:5000/api',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    withCredentials: false\r\n});\r\n\r\n// Add request interceptor for authentication\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        console.log(`API Request: ${config.method.toUpperCase()} ${config.url}`, config.data);\r\n\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('Request interceptor error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Add response interceptor for error handling\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        console.log(`API Response from ${response.config.url}:`, response.data);\r\n\r\n        // For most successful responses, just return the data\r\n        return response.data;\r\n    },\r\n    (error) => {\r\n        if (!error.response) {\r\n            console.error('Network Error:', error.message);\r\n            return Promise.reject({\r\n                status: 'network_error',\r\n                message: 'Unable to connect to the server. Please check your internet connection.',\r\n            });\r\n        }\r\n\r\n        console.error(`API Error (${error.response.status}) from ${error.config.url}:`, error.response.data);\r\n\r\n        // Handle authentication errors\r\n        if (error.response.status === 401) {\r\n            localStorage.removeItem('token');\r\n\r\n            if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {\r\n                window.location.href = '/login';\r\n            }\r\n        }\r\n\r\n        return Promise.reject(error.response.data || {\r\n            message: 'An unexpected error occurred'\r\n        });\r\n    }\r\n);\r\n\r\n// Simple API methods\r\nconst apiService = {\r\n    // GET request\r\n    get: async (url, config = {}) => {\r\n        try {\r\n            const response = await api.get(url, config);\r\n            return response;\r\n        } catch (error) {\r\n            console.error(`GET ${url} failed:`, error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // POST request\r\n    post: async (url, data = {}, config = {}) => {\r\n        try {\r\n            const response = await api.post(url, data, config);\r\n            return response;\r\n        } catch (error) {\r\n            console.error(`POST ${url} failed:`, error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // PUT request\r\n    put: async (url, data = {}, config = {}) => {\r\n        try {\r\n            const response = await api.put(url, data, config);\r\n            return response;\r\n        } catch (error) {\r\n            console.error(`PUT ${url} failed:`, error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // DELETE request\r\n    delete: async (url, config = {}) => {\r\n        try {\r\n            const response = await api.delete(url, config);\r\n            return response;\r\n        } catch (error) {\r\n            console.error(`DELETE ${url} failed:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Task Management System\\\\frontend\\\\src\\\\context\\\\ProjectContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\nimport { toast } from 'react-toastify';\nimport projectService from '../services/projectService';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectContext = /*#__PURE__*/createContext(null);\nexport const ProjectProvider = ({\n  children\n}) => {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [currentProject, setCurrentProject] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch all projects\n  const fetchProjects = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.getProjects();\n      setProjects(data);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error fetching projects:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch projects');\n      toast.error('Failed to fetch projects');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch a single project by ID\n  const fetchProject = useCallback(async projectId => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.getProject(projectId);\n      setCurrentProject(data);\n      return data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error(`Error fetching project ${projectId}:`, error);\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch project');\n      toast.error('Failed to fetch project details');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create a new project\n  const createProject = useCallback(async projectData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.createProject(projectData);\n      setProjects(prevProjects => [...prevProjects, data]);\n      toast.success('Project created successfully!');\n      return data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error creating project:', error);\n      setError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create project');\n      toast.error('Failed to create project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Update a project\n  const updateProject = useCallback(async (projectId, projectData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.updateProject(projectId, projectData);\n      setProjects(prevProjects => prevProjects.map(project => project._id === projectId ? data : project));\n      if (currentProject && currentProject._id === projectId) {\n        setCurrentProject(data);\n      }\n      toast.success('Project updated successfully!');\n      return data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error(`Error updating project ${projectId}:`, error);\n      setError(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update project');\n      toast.error('Failed to update project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentProject]);\n\n  // Delete a project\n  const deleteProject = useCallback(async projectId => {\n    try {\n      setLoading(true);\n      setError(null);\n      await projectService.deleteProject(projectId);\n      setProjects(prevProjects => prevProjects.filter(project => project._id !== projectId));\n      if (currentProject && currentProject._id === projectId) {\n        setCurrentProject(null);\n      }\n      toast.success('Project deleted successfully!');\n      return true;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error(`Error deleting project ${projectId}:`, error);\n      setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete project');\n      toast.error('Failed to delete project');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentProject]);\n\n  // Add a member to project\n  const addProjectMember = useCallback(async (projectId, userId) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.addProjectMember(projectId, userId);\n\n      // Update projects list\n      setProjects(prevProjects => prevProjects.map(project => project._id === projectId ? data : project));\n\n      // Update current project if it's the one being modified\n      if (currentProject && currentProject._id === projectId) {\n        setCurrentProject(data);\n      }\n      toast.success('Member added to project successfully!');\n      return data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error(`Error adding member to project ${projectId}:`, error);\n      setError(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to add member to project');\n      toast.error('Failed to add member to project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentProject]);\n\n  // Remove a member from project\n  const removeProjectMember = useCallback(async (projectId, userId) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.removeProjectMember(projectId, userId);\n\n      // Update projects list\n      setProjects(prevProjects => prevProjects.map(project => project._id === projectId ? data : project));\n\n      // Update current project if it's the one being modified\n      if (currentProject && currentProject._id === projectId) {\n        setCurrentProject(data);\n      }\n      toast.success('Member removed from project successfully!');\n      return data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      console.error(`Error removing member from project ${projectId}:`, error);\n      setError(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to remove member from project');\n      toast.error('Failed to remove member from project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [currentProject]);\n\n  // Memoize context value\n  const contextValue = useMemo(() => ({\n    projects,\n    currentProject,\n    loading,\n    error,\n    fetchProjects,\n    fetchProject,\n    createProject,\n    updateProject,\n    deleteProject,\n    addProjectMember,\n    removeProjectMember\n  }), [projects, currentProject, loading, error, fetchProjects, fetchProject, createProject, updateProject, deleteProject, addProjectMember, removeProjectMember]);\n  return /*#__PURE__*/_jsxDEV(ProjectContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the project context\n_s(ProjectProvider, \"2AV7xCYtjIVnLrT3GogaUJXv8iw=\");\n_c = ProjectProvider;\nexport const useProject = () => {\n  _s2();\n  const context = useContext(ProjectContext);\n  if (!context) {\n    throw new Error('useProject must be used within a ProjectProvider');\n  }\n  return context;\n};\n_s2(useProject, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ProjectProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useMemo","toast","projectService","jsxDEV","_jsxDEV","ProjectContext","ProjectProvider","children","_s","projects","setProjects","currentProject","setCurrentProject","loading","setLoading","error","setError","fetchProjects","data","getProjects","_error$response","_error$response$data","console","response","message","fetchProject","projectId","getProject","_error$response2","_error$response2$data","createProject","projectData","prevProjects","success","_error$response3","_error$response3$data","updateProject","map","project","_id","_error$response4","_error$response4$data","deleteProject","filter","_error$response5","_error$response5$data","addProjectMember","userId","_error$response6","_error$response6$data","removeProjectMember","_error$response7","_error$response7$data","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useProject","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/context/ProjectContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport projectService from '../services/projectService';\r\n\r\n// Create context\r\nconst ProjectContext = createContext(null);\r\n\r\nexport const ProjectProvider = ({ children }) => {\r\n    const [projects, setProjects] = useState([]);\r\n    const [currentProject, setCurrentProject] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Fetch all projects\r\n    const fetchProjects = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.getProjects();\r\n            setProjects(data);\r\n        } catch (error) {\r\n            console.error('Error fetching projects:', error);\r\n            setError(error.response?.data?.message || 'Failed to fetch projects');\r\n            toast.error('Failed to fetch projects');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Fetch a single project by ID\r\n    const fetchProject = useCallback(async (projectId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.getProject(projectId);\r\n            setCurrentProject(data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error fetching project ${projectId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to fetch project');\r\n            toast.error('Failed to fetch project details');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Create a new project\r\n    const createProject = useCallback(async (projectData) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.createProject(projectData);\r\n            setProjects(prevProjects => [...prevProjects, data]);\r\n            toast.success('Project created successfully!');\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error creating project:', error);\r\n            setError(error.response?.data?.message || 'Failed to create project');\r\n            toast.error('Failed to create project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Update a project\r\n    const updateProject = useCallback(async (projectId, projectData) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.updateProject(projectId, projectData);\r\n            setProjects(prevProjects =>\r\n                prevProjects.map(project =>\r\n                    project._id === projectId ? data : project\r\n                )\r\n            );\r\n\r\n            if (currentProject && currentProject._id === projectId) {\r\n                setCurrentProject(data);\r\n            }\r\n\r\n            toast.success('Project updated successfully!');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error updating project ${projectId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to update project');\r\n            toast.error('Failed to update project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentProject]);\r\n\r\n    // Delete a project\r\n    const deleteProject = useCallback(async (projectId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            await projectService.deleteProject(projectId);\r\n\r\n            setProjects(prevProjects =>\r\n                prevProjects.filter(project => project._id !== projectId)\r\n            );\r\n\r\n            if (currentProject && currentProject._id === projectId) {\r\n                setCurrentProject(null);\r\n            }\r\n\r\n            toast.success('Project deleted successfully!');\r\n            return true;\r\n        } catch (error) {\r\n            console.error(`Error deleting project ${projectId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to delete project');\r\n            toast.error('Failed to delete project');\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentProject]);\r\n\r\n    // Add a member to project\r\n    const addProjectMember = useCallback(async (projectId, userId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.addProjectMember(projectId, userId);\r\n\r\n            // Update projects list\r\n            setProjects(prevProjects =>\r\n                prevProjects.map(project =>\r\n                    project._id === projectId ? data : project\r\n                )\r\n            );\r\n\r\n            // Update current project if it's the one being modified\r\n            if (currentProject && currentProject._id === projectId) {\r\n                setCurrentProject(data);\r\n            }\r\n\r\n            toast.success('Member added to project successfully!');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error adding member to project ${projectId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to add member to project');\r\n            toast.error('Failed to add member to project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentProject]);\r\n\r\n    // Remove a member from project\r\n    const removeProjectMember = useCallback(async (projectId, userId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.removeProjectMember(projectId, userId);\r\n\r\n            // Update projects list\r\n            setProjects(prevProjects =>\r\n                prevProjects.map(project =>\r\n                    project._id === projectId ? data : project\r\n                )\r\n            );\r\n\r\n            // Update current project if it's the one being modified\r\n            if (currentProject && currentProject._id === projectId) {\r\n                setCurrentProject(data);\r\n            }\r\n\r\n            toast.success('Member removed from project successfully!');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error removing member from project ${projectId}:`, error);\r\n            setError(error.response?.data?.message || 'Failed to remove member from project');\r\n            toast.error('Failed to remove member from project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentProject]);\r\n\r\n    // Memoize context value\r\n    const contextValue = useMemo(() => ({\r\n        projects,\r\n        currentProject,\r\n        loading,\r\n        error,\r\n        fetchProjects,\r\n        fetchProject,\r\n        createProject,\r\n        updateProject,\r\n        deleteProject,\r\n        addProjectMember,\r\n        removeProjectMember\r\n    }), [\r\n        projects,\r\n        currentProject,\r\n        loading,\r\n        error,\r\n        fetchProjects,\r\n        fetchProject,\r\n        createProject,\r\n        updateProject,\r\n        deleteProject,\r\n        addProjectMember,\r\n        removeProjectMember\r\n    ]);\r\n\r\n    return (\r\n        <ProjectContext.Provider value={contextValue}>\r\n            {children}\r\n        </ProjectContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the project context\r\nexport const useProject = () => {\r\n    const context = useContext(ProjectContext);\r\n    if (!context) {\r\n        throw new Error('useProject must be used within a ProjectProvider');\r\n    }\r\n    return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
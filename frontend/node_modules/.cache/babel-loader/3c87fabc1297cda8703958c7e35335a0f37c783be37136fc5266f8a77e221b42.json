{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 15000 // 15 seconds timeout\n});\n\n// Add request interceptor for authentication\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => {\n  // Return standardized response data\n  return response.data.data || response.data;\n}, async error => {\n  var _error$response, _error$response2, _error$response2$data, _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n  const originalRequest = error.config;\n\n  // Handle network errors\n  if (!error.response) {\n    console.error('Network Error:', error.message);\n    return Promise.reject({\n      status: 'network_error',\n      message: 'Unable to connect to the server. Please check your internet connection.'\n    });\n  }\n\n  // Handle authentication errors\n  if (error.response.status === 401) {\n    // If token is invalid or expired and this wasn't already a retry\n    if (!originalRequest._retry) {\n      // Clear token from storage\n      localStorage.removeItem('token');\n\n      // Redirect to login if not already there\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n    }\n  }\n\n  // Create a standardized error object\n  const errorResponse = {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'An error occurred',\n    errors: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.errors,\n    response: error.response\n  };\n  console.error('API Error:', errorResponse);\n  return Promise.reject(errorResponse);\n});\n\n// Helper function for retrying requests\napi.retryRequest = async (fn, maxRetries = 3, delay = 1000) => {\n  let lastError;\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n      // Only retry on network errors or 5xx server errors\n      if (!error.response || error.response.status >= 500 && error.response.status < 600) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n        continue;\n      }\n      break;\n    }\n  }\n  throw lastError;\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","data","_error$response","_error$response2","_error$response2$data","_error$response3","_error$response3$data","_error$response4","_error$response4$data","originalRequest","console","message","status","_retry","removeItem","window","location","pathname","href","errorResponse","errors","retryRequest","fn","maxRetries","delay","lastError","attempt","resolve","setTimeout"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:5000/api',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    timeout: 15000 // 15 seconds timeout\r\n});\r\n\r\n// Add request interceptor for authentication\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\n\r\n// Add response interceptor for error handling\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        // Return standardized response data\r\n        return response.data.data || response.data;\r\n    },\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        // Handle network errors\r\n        if (!error.response) {\r\n            console.error('Network Error:', error.message);\r\n            return Promise.reject({\r\n                status: 'network_error',\r\n                message: 'Unable to connect to the server. Please check your internet connection.',\r\n            });\r\n        }\r\n\r\n        // Handle authentication errors\r\n        if (error.response.status === 401) {\r\n            // If token is invalid or expired and this wasn't already a retry\r\n            if (!originalRequest._retry) {\r\n                // Clear token from storage\r\n                localStorage.removeItem('token');\r\n\r\n                // Redirect to login if not already there\r\n                if (window.location.pathname !== '/login') {\r\n                    window.location.href = '/login';\r\n                }\r\n            }\r\n        }\r\n\r\n        // Create a standardized error object\r\n        const errorResponse = {\r\n            status: error.response?.status,\r\n            message: error.response?.data?.message || error.response?.data?.error || 'An error occurred',\r\n            errors: error.response?.data?.errors,\r\n            response: error.response\r\n        };\r\n\r\n        console.error('API Error:', errorResponse);\r\n        \r\n        return Promise.reject(errorResponse);\r\n    }\r\n);\r\n\r\n// Helper function for retrying requests\r\napi.retryRequest = async (fn, maxRetries = 3, delay = 1000) => {\r\n    let lastError;\r\n\r\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\r\n        try {\r\n            return await fn();\r\n        } catch (error) {\r\n            lastError = error;\r\n            // Only retry on network errors or 5xx server errors\r\n            if (!error.response || (error.response.status >= 500 && error.response.status < 600)) {\r\n                await new Promise(resolve => setTimeout(resolve, delay));\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    throw lastError;\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import api from './api';\n\n/**\r\n * Service for authentication related API calls\r\n */\nconst authService = {\n  /**\r\n   * Register a new user\r\n   * @param {Object} userData - User data including name, email, password\r\n   * @returns {Promise<Object>} User data with token\r\n   */\n  register: async userData => {\n    try {\n      console.log('Registering user:', {\n        email: userData.email\n      });\n      const response = await api.post('/auth/register', userData);\n      console.log('Registration response:', response);\n      return response;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Login a user\r\n   * @param {string} email - User email\r\n   * @param {string} password - User password\r\n   * @returns {Promise<Object>} User data with token\r\n   */\n  login: async (email, password) => {\n    try {\n      console.log('Logging in user:', {\n        email\n      });\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      console.log('Login response:', response);\n      return response;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Logout the current user\r\n   * @returns {Promise<Object>} Success message\r\n   */\n  logout: async () => {\n    try {\n      const response = await api.get('/auth/logout');\n      return response;\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Still clear local storage even if API call fails\n      localStorage.removeItem('token');\n      throw error;\n    }\n  },\n  /**\r\n   * Get the current logged in user\r\n   * @returns {Promise<Object>} User data\r\n   */\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response.user || response;\n    } catch (error) {\n      console.error('Get current user error:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Update user profile\r\n   * @param {Object} userData - User data to update\r\n   * @returns {Promise<Object>} Updated user data\r\n   */\n  updateProfile: async userData => {\n    try {\n      const response = await api.put('/auth/updatedetails', userData);\n      return response.user || response;\n    } catch (error) {\n      console.error('Update profile error:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Update user password\r\n   * @param {Object} passwordData - Password data including currentPassword and newPassword\r\n   * @returns {Promise<Object>} Success message\r\n   */\n  updatePassword: async passwordData => {\n    try {\n      const response = await api.put('/auth/updatepassword', passwordData);\n      return response;\n    } catch (error) {\n      console.error('Update password error:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Request password reset\r\n   * @param {string} email - User email\r\n   * @returns {Promise<Object>} Success message\r\n   */\n  forgotPassword: async email => {\n    try {\n      const response = await api.post('/auth/forgotpassword', {\n        email\n      });\n      return response;\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * Reset password with token\r\n   * @param {string} token - Reset token\r\n   * @param {string} password - New password\r\n   * @returns {Promise<Object>} Success message\r\n   */\n  resetPassword: async (token, password) => {\n    try {\n      const response = await api.put(`/auth/resetpassword/${token}`, {\n        password\n      });\n      return response;\n    } catch (error) {\n      console.error('Reset password error:', error);\n      throw error;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","register","userData","console","log","email","response","post","error","login","password","logout","get","localStorage","removeItem","getCurrentUser","user","updateProfile","put","updatePassword","passwordData","forgotPassword","resetPassword","token"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\n/**\r\n * Service for authentication related API calls\r\n */\r\nconst authService = {\r\n  /**\r\n   * Register a new user\r\n   * @param {Object} userData - User data including name, email, password\r\n   * @returns {Promise<Object>} User data with token\r\n   */\r\n  register: async (userData) => {\r\n    try {\r\n      console.log('Registering user:', { email: userData.email });\r\n      const response = await api.post('/auth/register', userData);\r\n      console.log('Registration response:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Login a user\r\n   * @param {string} email - User email\r\n   * @param {string} password - User password\r\n   * @returns {Promise<Object>} User data with token\r\n   */\r\n  login: async (email, password) => {\r\n    try {\r\n      console.log('Logging in user:', { email });\r\n      const response = await api.post('/auth/login', { email, password });\r\n      console.log('Login response:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Logout the current user\r\n   * @returns {Promise<Object>} Success message\r\n   */\r\n  logout: async () => {\r\n    try {\r\n      const response = await api.get('/auth/logout');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      // Still clear local storage even if API call fails\r\n      localStorage.removeItem('token');\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get the current logged in user\r\n   * @returns {Promise<Object>} User data\r\n   */\r\n  getCurrentUser: async () => {\r\n    try {\r\n      const response = await api.get('/auth/me');\r\n      return response.user || response;\r\n    } catch (error) {\r\n      console.error('Get current user error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Update user profile\r\n   * @param {Object} userData - User data to update\r\n   * @returns {Promise<Object>} Updated user data\r\n   */\r\n  updateProfile: async (userData) => {\r\n    try {\r\n      const response = await api.put('/auth/updatedetails', userData);\r\n      return response.user || response;\r\n    } catch (error) {\r\n      console.error('Update profile error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Update user password\r\n   * @param {Object} passwordData - Password data including currentPassword and newPassword\r\n   * @returns {Promise<Object>} Success message\r\n   */\r\n  updatePassword: async (passwordData) => {\r\n    try {\r\n      const response = await api.put('/auth/updatepassword', passwordData);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Update password error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Request password reset\r\n   * @param {string} email - User email\r\n   * @returns {Promise<Object>} Success message\r\n   */\r\n  forgotPassword: async (email) => {\r\n    try {\r\n      const response = await api.post('/auth/forgotpassword', { email });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Forgot password error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Reset password with token\r\n   * @param {string} token - Reset token\r\n   * @param {string} password - New password\r\n   * @returns {Promise<Object>} Success message\r\n   */\r\n  resetPassword: async (token, password) => {\r\n    try {\r\n      const response = await api.put(`/auth/resetpassword/${token}`, { password });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Reset password error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
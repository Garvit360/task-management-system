{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Task Management System\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport authService from '../services/authService';\nimport api from '../services/api';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on component mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  // Check if user is already logged in\n  const checkAuthStatus = useCallback(async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      const userData = await authService.getCurrentUser();\n      setUser(userData);\n    } catch (error) {\n      console.error('Authentication check failed:', error);\n      localStorage.removeItem('token');\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Login user\n  const login = useCallback(async (email, password) => {\n    try {\n      setLoading(true);\n      console.log('Attempting login with:', {\n        email\n      });\n\n      // Attempt login with retry logic\n      const response = await api.retryRequest(() => authService.login(email, password), 3,\n      // 3 retries\n      1000 // 1 second between retries\n      );\n      console.log('Login response:', response);\n\n      // Check if we have a valid response with user data\n      if (!response || !response.user || !response.user.token) {\n        console.error('Invalid response format:', response);\n        throw new Error('Invalid response from server');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', response.user.token);\n\n      // Set user in state\n      setUser(response.user);\n      toast.success('Successfully logged in!');\n      navigate('/dashboard');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login failed:', error);\n      let errorMessage = 'Login failed. Please try again.';\n      if (error.status === 'network_error') {\n        errorMessage = 'Unable to connect to the server. Please check if the backend server is running.';\n      } else if (error.message) {\n        errorMessage = error.message;\n      } else if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n        errorMessage = error.response.data.message;\n      }\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Register user\n  const register = useCallback(async userData => {\n    try {\n      setLoading(true);\n      console.log('Attempting registration with:', {\n        email: userData.email\n      });\n      const response = await api.retryRequest(() => authService.register(userData), 3,\n      // 3 retries\n      1000 // 1 second between retries\n      );\n      console.log('Registration response:', response);\n\n      // Check if we have a valid response with user data\n      if (!response || !response.user || !response.user.token) {\n        console.error('Invalid response format:', response);\n        throw new Error('Invalid response from server');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', response.user.token);\n\n      // Set user in state\n      setUser(response.user);\n      toast.success('Registration successful!');\n      navigate('/dashboard');\n      return true;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Registration failed:', error);\n      let errorMessage = 'Registration failed. Please try again.';\n      if (error.status === 'network_error') {\n        errorMessage = 'Unable to connect to the server. Please check if the backend server is running.';\n      } else if (error.message) {\n        errorMessage = error.message;\n      } else if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.message) {\n        errorMessage = error.response.data.message;\n      }\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Logout user\n  const logout = useCallback(async () => {\n    try {\n      setLoading(true);\n      await authService.logout();\n\n      // Remove token from localStorage\n      localStorage.removeItem('token');\n\n      // Clear user from state\n      setUser(null);\n      toast.success('Successfully logged out!');\n      navigate('/login');\n    } catch (error) {\n      console.error('Logout failed:', error);\n      // Force logout on client side even if API call fails\n      localStorage.removeItem('token');\n      setUser(null);\n      navigate('/login');\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Update user profile\n  const updateProfile = useCallback(async userData => {\n    try {\n      setLoading(true);\n      const updatedUser = await authService.updateProfile(userData);\n      setUser(prevUser => ({\n        ...prevUser,\n        ...updatedUser\n      }));\n      toast.success('Profile updated successfully!');\n      return true;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Profile update failed:', error);\n      toast.error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to update profile. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Update password\n  const updatePassword = useCallback(async passwordData => {\n    try {\n      setLoading(true);\n      await authService.updatePassword(passwordData);\n      toast.success('Password updated successfully!');\n      return true;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Password update failed:', error);\n      toast.error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update password. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Memoize context value\n  const contextValue = useMemo(() => ({\n    user,\n    loading,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    checkAuthStatus,\n    updateProfile,\n    updatePassword\n  }), [user, loading, login, register, logout, checkAuthStatus, updateProfile, updatePassword]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"++1yeTBcy3lEvs0/PTgfVsnXkrw=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useMemo","useEffect","useNavigate","toast","authService","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","navigate","checkAuthStatus","token","localStorage","getItem","userData","getCurrentUser","error","console","removeItem","login","email","password","log","response","retryRequest","Error","setItem","success","_error$response","_error$response$data","errorMessage","status","message","data","register","_error$response2","_error$response2$data","logout","updateProfile","updatedUser","prevUser","_error$response3","_error$response3$data","updatePassword","passwordData","_error$response4","_error$response4$data","contextValue","isAuthenticated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport authService from '../services/authService';\r\nimport api from '../services/api';\r\n\r\n// Create context\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    // Check if user is already logged in on component mount\r\n    useEffect(() => {\r\n        checkAuthStatus();\r\n    }, []);\r\n\r\n    // Check if user is already logged in\r\n    const checkAuthStatus = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            const token = localStorage.getItem('token');\r\n\r\n            if (!token) {\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            const userData = await authService.getCurrentUser();\r\n            setUser(userData);\r\n        } catch (error) {\r\n            console.error('Authentication check failed:', error);\r\n            localStorage.removeItem('token');\r\n            setUser(null);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Login user\r\n    const login = useCallback(async (email, password) => {\r\n        try {\r\n            setLoading(true);\r\n            console.log('Attempting login with:', { email });\r\n            \r\n            // Attempt login with retry logic\r\n            const response = await api.retryRequest(\r\n                () => authService.login(email, password),\r\n                3,  // 3 retries\r\n                1000 // 1 second between retries\r\n            );\r\n            \r\n            console.log('Login response:', response);\r\n\r\n            // Check if we have a valid response with user data\r\n            if (!response || !response.user || !response.user.token) {\r\n                console.error('Invalid response format:', response);\r\n                throw new Error('Invalid response from server');\r\n            }\r\n\r\n            // Store token in localStorage\r\n            localStorage.setItem('token', response.user.token);\r\n\r\n            // Set user in state\r\n            setUser(response.user);\r\n\r\n            toast.success('Successfully logged in!');\r\n            navigate('/dashboard');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Login failed:', error);\r\n            let errorMessage = 'Login failed. Please try again.';\r\n\r\n            if (error.status === 'network_error') {\r\n                errorMessage = 'Unable to connect to the server. Please check if the backend server is running.';\r\n            } else if (error.message) {\r\n                errorMessage = error.message;\r\n            } else if (error.response?.data?.message) {\r\n                errorMessage = error.response.data.message;\r\n            }\r\n\r\n            toast.error(errorMessage);\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Register user\r\n    const register = useCallback(async (userData) => {\r\n        try {\r\n            setLoading(true);\r\n            console.log('Attempting registration with:', { email: userData.email });\r\n            \r\n            const response = await api.retryRequest(\r\n                () => authService.register(userData),\r\n                3,  // 3 retries\r\n                1000 // 1 second between retries\r\n            );\r\n            \r\n            console.log('Registration response:', response);\r\n\r\n            // Check if we have a valid response with user data\r\n            if (!response || !response.user || !response.user.token) {\r\n                console.error('Invalid response format:', response);\r\n                throw new Error('Invalid response from server');\r\n            }\r\n\r\n            // Store token in localStorage\r\n            localStorage.setItem('token', response.user.token);\r\n\r\n            // Set user in state\r\n            setUser(response.user);\r\n\r\n            toast.success('Registration successful!');\r\n            navigate('/dashboard');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Registration failed:', error);\r\n            let errorMessage = 'Registration failed. Please try again.';\r\n            \r\n            if (error.status === 'network_error') {\r\n                errorMessage = 'Unable to connect to the server. Please check if the backend server is running.';\r\n            } else if (error.message) {\r\n                errorMessage = error.message;\r\n            } else if (error.response?.data?.message) {\r\n                errorMessage = error.response.data.message;\r\n            }\r\n            \r\n            toast.error(errorMessage);\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Logout user\r\n    const logout = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            await authService.logout();\r\n\r\n            // Remove token from localStorage\r\n            localStorage.removeItem('token');\r\n\r\n            // Clear user from state\r\n            setUser(null);\r\n\r\n            toast.success('Successfully logged out!');\r\n            navigate('/login');\r\n        } catch (error) {\r\n            console.error('Logout failed:', error);\r\n            // Force logout on client side even if API call fails\r\n            localStorage.removeItem('token');\r\n            setUser(null);\r\n            navigate('/login');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Update user profile\r\n    const updateProfile = useCallback(async (userData) => {\r\n        try {\r\n            setLoading(true);\r\n            const updatedUser = await authService.updateProfile(userData);\r\n            setUser(prevUser => ({ ...prevUser, ...updatedUser }));\r\n            toast.success('Profile updated successfully!');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Profile update failed:', error);\r\n            toast.error(error.response?.data?.message || 'Failed to update profile. Please try again.');\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Update password\r\n    const updatePassword = useCallback(async (passwordData) => {\r\n        try {\r\n            setLoading(true);\r\n            await authService.updatePassword(passwordData);\r\n            toast.success('Password updated successfully!');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Password update failed:', error);\r\n            toast.error(error.response?.data?.message || 'Failed to update password. Please try again.');\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Memoize context value\r\n    const contextValue = useMemo(() => ({\r\n        user,\r\n        loading,\r\n        isAuthenticated: !!user,\r\n        login,\r\n        register,\r\n        logout,\r\n        checkAuthStatus,\r\n        updateProfile,\r\n        updatePassword\r\n    }), [user, loading, login, register, logout, checkAuthStatus, updateProfile, updatePassword]);\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Task Management System\\\\frontend\\\\src\\\\context\\\\ProjectContext.jsx\";\nimport React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport projectService from '../services/projectService';\n\n// Create context\nconst ProjectContext = createContext(null);\nexport const ProjectProvider = ({\n  children\n}) => {\n  const [projects, setProjects] = useState([]);\n  const [project, setProject] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Fetch all projects\n  const fetchProjects = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.getProjects();\n      setProjects(data);\n      return data;\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n      setError(error.message || 'Failed to fetch projects');\n      toast.error('Failed to fetch projects');\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch single project by ID\n  const fetchProject = useCallback(async projectId => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.getProjectById(projectId);\n      setProject(data);\n      return data;\n    } catch (error) {\n      console.error(`Error fetching project ${projectId}:`, error);\n      setError(error.message || 'Failed to fetch project');\n      toast.error('Failed to fetch project details');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Create a new project\n  const createProject = useCallback(async projectData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.createProject(projectData);\n\n      // Update projects list with the new project\n      setProjects(prev => {\n        // Check if project already exists to avoid duplicates\n        const exists = prev.some(p => p._id === data._id);\n        if (exists) {\n          return prev.map(p => p._id === data._id ? data : p);\n        }\n        return [...prev, data];\n      });\n      toast.success('Project created successfully');\n      return data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error creating project:', error);\n      const errorMessage = error.message || ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to create project';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Update an existing project\n  const updateProject = useCallback(async (projectId, projectData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.updateProject(projectId, projectData);\n\n      // Update local state\n      setProject(data);\n      setProjects(prev => prev.map(p => p._id === projectId ? data : p));\n      toast.success('Project updated successfully');\n      return data;\n    } catch (error) {\n      console.error(`Error updating project ${projectId}:`, error);\n      setError(error.message || 'Failed to update project');\n      toast.error('Failed to update project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Delete a project\n  const deleteProject = useCallback(async projectId => {\n    try {\n      setLoading(true);\n      setError(null);\n      await projectService.deleteProject(projectId);\n\n      // Update local state\n      setProjects(prev => prev.filter(p => p._id !== projectId));\n      toast.success('Project deleted successfully');\n      navigate('/projects');\n      return true;\n    } catch (error) {\n      console.error(`Error deleting project ${projectId}:`, error);\n      setError(error.message || 'Failed to delete project');\n      toast.error('Failed to delete project');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Add member to a project\n  const addMemberToProject = useCallback(async (projectId, email) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.addMember(projectId, {\n        email\n      });\n\n      // Update local state\n      setProject(data);\n      setProjects(prev => prev.map(p => p._id === projectId ? data : p));\n      toast.success('Member added to project');\n      return data;\n    } catch (error) {\n      console.error(`Error adding member to project ${projectId}:`, error);\n      setError(error.message || 'Failed to add member');\n      toast.error('Failed to add member to project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Remove member from a project\n  const removeMemberFromProject = useCallback(async (projectId, userId) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await projectService.removeMember(projectId, userId);\n\n      // Update local state\n      setProject(data);\n      setProjects(prev => prev.map(p => p._id === projectId ? data : p));\n      toast.success('Member removed from project');\n      return data;\n    } catch (error) {\n      console.error(`Error removing member from project ${projectId}:`, error);\n      setError(error.message || 'Failed to remove member');\n      toast.error('Failed to remove member from project');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Memoize context value\n  const contextValue = useMemo(() => ({\n    projects,\n    project,\n    loading,\n    error,\n    fetchProjects,\n    fetchProject,\n    createProject,\n    updateProject,\n    deleteProject,\n    addMemberToProject,\n    removeMemberFromProject\n  }), [projects, project, loading, error, fetchProjects, fetchProject, createProject, updateProject, deleteProject, addMemberToProject, removeMemberFromProject]);\n  return /*#__PURE__*/React.createElement(ProjectContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, children);\n};\n\n// Custom hook to use the project context\nexport const useProject = () => {\n  const context = useContext(ProjectContext);\n  if (!context) {\n    throw new Error('useProject must be used within a ProjectProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useMemo","useNavigate","toast","projectService","ProjectContext","ProjectProvider","children","projects","setProjects","project","setProject","loading","setLoading","error","setError","navigate","fetchProjects","data","getProjects","console","message","fetchProject","projectId","getProjectById","createProject","projectData","prev","exists","some","p","_id","map","success","_error$response","_error$response$data","errorMessage","response","updateProject","deleteProject","filter","addMemberToProject","email","addMember","removeMemberFromProject","userId","removeMember","contextValue","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useProject","context","Error"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/context/ProjectContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport projectService from '../services/projectService';\r\n\r\n// Create context\r\nconst ProjectContext = createContext(null);\r\n\r\nexport const ProjectProvider = ({ children }) => {\r\n    const [projects, setProjects] = useState([]);\r\n    const [project, setProject] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    // Fetch all projects\r\n    const fetchProjects = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.getProjects();\r\n            setProjects(data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error fetching projects:', error);\r\n            setError(error.message || 'Failed to fetch projects');\r\n            toast.error('Failed to fetch projects');\r\n            return [];\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Fetch single project by ID\r\n    const fetchProject = useCallback(async (projectId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.getProjectById(projectId);\r\n            setProject(data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error fetching project ${projectId}:`, error);\r\n            setError(error.message || 'Failed to fetch project');\r\n            toast.error('Failed to fetch project details');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Create a new project\r\n    const createProject = useCallback(async (projectData) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.createProject(projectData);\r\n\r\n            // Update projects list with the new project\r\n            setProjects(prev => {\r\n                // Check if project already exists to avoid duplicates\r\n                const exists = prev.some(p => p._id === data._id);\r\n                if (exists) {\r\n                    return prev.map(p => p._id === data._id ? data : p);\r\n                }\r\n                return [...prev, data];\r\n            });\r\n\r\n            toast.success('Project created successfully');\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error creating project:', error);\r\n            const errorMessage = error.message || error.response?.data?.message || 'Failed to create project';\r\n            setError(errorMessage);\r\n            toast.error(errorMessage);\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Update an existing project\r\n    const updateProject = useCallback(async (projectId, projectData) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.updateProject(projectId, projectData);\r\n\r\n            // Update local state\r\n            setProject(data);\r\n            setProjects(prev =>\r\n                prev.map(p => p._id === projectId ? data : p)\r\n            );\r\n\r\n            toast.success('Project updated successfully');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error updating project ${projectId}:`, error);\r\n            setError(error.message || 'Failed to update project');\r\n            toast.error('Failed to update project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Delete a project\r\n    const deleteProject = useCallback(async (projectId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            await projectService.deleteProject(projectId);\r\n\r\n            // Update local state\r\n            setProjects(prev => prev.filter(p => p._id !== projectId));\r\n\r\n            toast.success('Project deleted successfully');\r\n            navigate('/projects');\r\n            return true;\r\n        } catch (error) {\r\n            console.error(`Error deleting project ${projectId}:`, error);\r\n            setError(error.message || 'Failed to delete project');\r\n            toast.error('Failed to delete project');\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Add member to a project\r\n    const addMemberToProject = useCallback(async (projectId, email) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.addMember(projectId, { email });\r\n\r\n            // Update local state\r\n            setProject(data);\r\n            setProjects(prev =>\r\n                prev.map(p => p._id === projectId ? data : p)\r\n            );\r\n\r\n            toast.success('Member added to project');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error adding member to project ${projectId}:`, error);\r\n            setError(error.message || 'Failed to add member');\r\n            toast.error('Failed to add member to project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Remove member from a project\r\n    const removeMemberFromProject = useCallback(async (projectId, userId) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            const data = await projectService.removeMember(projectId, userId);\r\n\r\n            // Update local state\r\n            setProject(data);\r\n            setProjects(prev =>\r\n                prev.map(p => p._id === projectId ? data : p)\r\n            );\r\n\r\n            toast.success('Member removed from project');\r\n            return data;\r\n        } catch (error) {\r\n            console.error(`Error removing member from project ${projectId}:`, error);\r\n            setError(error.message || 'Failed to remove member');\r\n            toast.error('Failed to remove member from project');\r\n            return null;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Memoize context value\r\n    const contextValue = useMemo(() => ({\r\n        projects,\r\n        project,\r\n        loading,\r\n        error,\r\n        fetchProjects,\r\n        fetchProject,\r\n        createProject,\r\n        updateProject,\r\n        deleteProject,\r\n        addMemberToProject,\r\n        removeMemberFromProject\r\n    }), [\r\n        projects,\r\n        project,\r\n        loading,\r\n        error,\r\n        fetchProjects,\r\n        fetchProject,\r\n        createProject,\r\n        updateProject,\r\n        deleteProject,\r\n        addMemberToProject,\r\n        removeMemberFromProject\r\n    ]);\r\n\r\n    return (\r\n        <ProjectContext.Provider value={contextValue}>\r\n            {children}\r\n        </ProjectContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the project context\r\nexport const useProject = () => {\r\n    const context = useContext(ProjectContext);\r\n    if (!context) {\r\n        throw new Error('useProject must be used within a ProjectProvider');\r\n    }\r\n    return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
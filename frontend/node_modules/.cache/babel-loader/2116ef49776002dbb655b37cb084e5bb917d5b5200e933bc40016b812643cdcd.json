{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Task Management System\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport authService from '../services/authService';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in\n  const checkAuthStatus = useCallback(async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      const userData = await authService.getCurrentUser();\n      setUser(userData);\n    } catch (error) {\n      console.error('Authentication check failed:', error);\n      localStorage.removeItem('token');\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Login user\n  const login = useCallback(async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await authService.login(email, password);\n\n      // Check if we have a valid response with user data\n      if (!response || !response.user || !response.user.token) {\n        throw new Error('Invalid response from server');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', response.user.token);\n\n      // Set user in state\n      setUser(response.user);\n      toast.success('Successfully logged in!');\n      navigate('/dashboard');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login failed:', error);\n      const errorMessage = error.message || ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed. Please try again.';\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Register user\n  const register = useCallback(async userData => {\n    try {\n      setLoading(true);\n      const response = await authService.register(userData);\n\n      // Check if we have a valid response with user data\n      if (!response || !response.user || !response.user.token) {\n        throw new Error('Invalid response from server');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', response.user.token);\n\n      // Set user in state\n      setUser(response.user);\n      toast.success('Registration successful!');\n      navigate('/dashboard');\n      return true;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Registration failed:', error);\n      const errorMessage = error.message || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed. Please try again.';\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Logout user\n  const logout = useCallback(async () => {\n    try {\n      setLoading(true);\n      await authService.logout();\n\n      // Remove token from localStorage\n      localStorage.removeItem('token');\n\n      // Clear user from state\n      setUser(null);\n      toast.success('Successfully logged out!');\n      navigate('/login');\n    } catch (error) {\n      console.error('Logout failed:', error);\n      // Force logout on client side even if API call fails\n      localStorage.removeItem('token');\n      setUser(null);\n      navigate('/login');\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Update user profile\n  const updateProfile = useCallback(async userData => {\n    try {\n      setLoading(true);\n      const updatedUser = await authService.updateProfile(userData);\n      setUser(prevUser => ({\n        ...prevUser,\n        ...updatedUser\n      }));\n      toast.success('Profile updated successfully!');\n      return true;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Profile update failed:', error);\n      toast.error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to update profile. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Update password\n  const updatePassword = useCallback(async passwordData => {\n    try {\n      setLoading(true);\n      await authService.updatePassword(passwordData);\n      toast.success('Password updated successfully!');\n      return true;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Password update failed:', error);\n      toast.error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update password. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Memoize context value\n  const contextValue = useMemo(() => ({\n    user,\n    loading,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    checkAuthStatus,\n    updateProfile,\n    updatePassword\n  }), [user, loading, login, register, logout, checkAuthStatus, updateProfile, updatePassword]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"9NEZ5n11JXaohGOVaa3THrfh5q0=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useMemo","useNavigate","toast","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","navigate","checkAuthStatus","token","localStorage","getItem","userData","getCurrentUser","error","console","removeItem","login","email","password","response","Error","setItem","success","_error$response","_error$response$data","errorMessage","message","data","register","_error$response2","_error$response2$data","logout","updateProfile","updatedUser","prevUser","_error$response3","_error$response3$data","updatePassword","passwordData","_error$response4","_error$response4$data","contextValue","isAuthenticated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport authService from '../services/authService';\r\n\r\n// Create context\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    // Check if user is already logged in\r\n    const checkAuthStatus = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            const token = localStorage.getItem('token');\r\n\r\n            if (!token) {\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            const userData = await authService.getCurrentUser();\r\n            setUser(userData);\r\n        } catch (error) {\r\n            console.error('Authentication check failed:', error);\r\n            localStorage.removeItem('token');\r\n            setUser(null);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Login user\r\n    const login = useCallback(async (email, password) => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await authService.login(email, password);\r\n\r\n            // Check if we have a valid response with user data\r\n            if (!response || !response.user || !response.user.token) {\r\n                throw new Error('Invalid response from server');\r\n            }\r\n\r\n            // Store token in localStorage\r\n            localStorage.setItem('token', response.user.token);\r\n\r\n            // Set user in state\r\n            setUser(response.user);\r\n\r\n            toast.success('Successfully logged in!');\r\n            navigate('/dashboard');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Login failed:', error);\r\n            const errorMessage = error.message || error.response?.data?.message || 'Login failed. Please try again.';\r\n            toast.error(errorMessage);\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Register user\r\n    const register = useCallback(async (userData) => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await authService.register(userData);\r\n\r\n            // Check if we have a valid response with user data\r\n            if (!response || !response.user || !response.user.token) {\r\n                throw new Error('Invalid response from server');\r\n            }\r\n\r\n            // Store token in localStorage\r\n            localStorage.setItem('token', response.user.token);\r\n\r\n            // Set user in state\r\n            setUser(response.user);\r\n\r\n            toast.success('Registration successful!');\r\n            navigate('/dashboard');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Registration failed:', error);\r\n            const errorMessage = error.message || error.response?.data?.message || 'Registration failed. Please try again.';\r\n            toast.error(errorMessage);\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Logout user\r\n    const logout = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            await authService.logout();\r\n\r\n            // Remove token from localStorage\r\n            localStorage.removeItem('token');\r\n\r\n            // Clear user from state\r\n            setUser(null);\r\n\r\n            toast.success('Successfully logged out!');\r\n            navigate('/login');\r\n        } catch (error) {\r\n            console.error('Logout failed:', error);\r\n            // Force logout on client side even if API call fails\r\n            localStorage.removeItem('token');\r\n            setUser(null);\r\n            navigate('/login');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Update user profile\r\n    const updateProfile = useCallback(async (userData) => {\r\n        try {\r\n            setLoading(true);\r\n            const updatedUser = await authService.updateProfile(userData);\r\n            setUser(prevUser => ({ ...prevUser, ...updatedUser }));\r\n            toast.success('Profile updated successfully!');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Profile update failed:', error);\r\n            toast.error(error.response?.data?.message || 'Failed to update profile. Please try again.');\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Update password\r\n    const updatePassword = useCallback(async (passwordData) => {\r\n        try {\r\n            setLoading(true);\r\n            await authService.updatePassword(passwordData);\r\n            toast.success('Password updated successfully!');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Password update failed:', error);\r\n            toast.error(error.response?.data?.message || 'Failed to update password. Please try again.');\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Memoize context value\r\n    const contextValue = useMemo(() => ({\r\n        user,\r\n        loading,\r\n        isAuthenticated: !!user,\r\n        login,\r\n        register,\r\n        logout,\r\n        checkAuthStatus,\r\n        updateProfile,\r\n        updatePassword\r\n    }), [user, loading, login, register, logout, checkAuthStatus, updateProfile, updatePassword]);\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
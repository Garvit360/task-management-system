{"ast":null,"code":"import api from './api';\n\n/**\r\n * Service for authentication related API calls\r\n */\nconst authService = {\n  /**\r\n   * Register a new user\r\n   * @param {Object} userData - User data including name, email, password\r\n   * @returns {Promise<Object>} User data with token\r\n   */\n  register: async userData => {\n    return await api.post('/auth/register', userData);\n  },\n  /**\r\n   * Login a user\r\n   * @param {string} email - User email\r\n   * @param {string} password - User password\r\n   * @returns {Promise<Object>} User data with token\r\n   */\n  login: async (email, password) => {\n    return await api.post('/auth/login', {\n      email,\n      password\n    });\n  },\n  /**\r\n   * Logout the current user\r\n   * @returns {Promise<Object>} Success message\r\n   */\n  logout: async () => {\n    return await api.get('/auth/logout');\n  },\n  /**\r\n   * Get the current logged in user\r\n   * @returns {Promise<Object>} User data\r\n   */\n  getCurrentUser: async () => {\n    return await api.get('/auth/me');\n  },\n  /**\r\n   * Update user profile\r\n   * @param {Object} userData - User data to update\r\n   * @returns {Promise<Object>} Updated user data\r\n   */\n  updateProfile: async userData => {\n    return await api.put('/auth/updatedetails', userData);\n  },\n  /**\r\n   * Update user password\r\n   * @param {Object} passwordData - Password data including currentPassword and newPassword\r\n   * @returns {Promise<Object>} Success message\r\n   */\n  updatePassword: async passwordData => {\n    return await api.put('/auth/updatepassword', passwordData);\n  },\n  /**\r\n   * Request password reset\r\n   * @param {string} email - User email\r\n   * @returns {Promise<Object>} Success message\r\n   */\n  forgotPassword: async email => {\n    return await api.post('/auth/forgotpassword', {\n      email\n    });\n  },\n  /**\r\n   * Reset password with token\r\n   * @param {string} token - Reset token\r\n   * @param {string} password - New password\r\n   * @returns {Promise<Object>} Success message\r\n   */\n  resetPassword: async (token, password) => {\n    return await api.put(`/auth/resetpassword/${token}`, {\n      password\n    });\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","register","userData","post","login","email","password","logout","get","getCurrentUser","updateProfile","put","updatePassword","passwordData","forgotPassword","resetPassword","token"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\r\n\r\n/**\r\n * Service for authentication related API calls\r\n */\r\nconst authService = {\r\n  /**\r\n   * Register a new user\r\n   * @param {Object} userData - User data including name, email, password\r\n   * @returns {Promise<Object>} User data with token\r\n   */\r\n  register: async (userData) => {\r\n    return await api.post('/auth/register', userData);\r\n  },\r\n\r\n  /**\r\n   * Login a user\r\n   * @param {string} email - User email\r\n   * @param {string} password - User password\r\n   * @returns {Promise<Object>} User data with token\r\n   */\r\n  login: async (email, password) => {\r\n    return await api.post('/auth/login', { email, password });\r\n  },\r\n\r\n  /**\r\n   * Logout the current user\r\n   * @returns {Promise<Object>} Success message\r\n   */\r\n  logout: async () => {\r\n    return await api.get('/auth/logout');\r\n  },\r\n\r\n  /**\r\n   * Get the current logged in user\r\n   * @returns {Promise<Object>} User data\r\n   */\r\n  getCurrentUser: async () => {\r\n    return await api.get('/auth/me');\r\n  },\r\n\r\n  /**\r\n   * Update user profile\r\n   * @param {Object} userData - User data to update\r\n   * @returns {Promise<Object>} Updated user data\r\n   */\r\n  updateProfile: async (userData) => {\r\n    return await api.put('/auth/updatedetails', userData);\r\n  },\r\n\r\n  /**\r\n   * Update user password\r\n   * @param {Object} passwordData - Password data including currentPassword and newPassword\r\n   * @returns {Promise<Object>} Success message\r\n   */\r\n  updatePassword: async (passwordData) => {\r\n    return await api.put('/auth/updatepassword', passwordData);\r\n  },\r\n\r\n  /**\r\n   * Request password reset\r\n   * @param {string} email - User email\r\n   * @returns {Promise<Object>} Success message\r\n   */\r\n  forgotPassword: async (email) => {\r\n    return await api.post('/auth/forgotpassword', { email });\r\n  },\r\n\r\n  /**\r\n   * Reset password with token\r\n   * @param {string} token - Reset token\r\n   * @param {string} password - New password\r\n   * @returns {Promise<Object>} Success message\r\n   */\r\n  resetPassword: async (token, password) => {\r\n    return await api.put(`/auth/resetpassword/${token}`, { password });\r\n  }\r\n};\r\n\r\nexport default authService; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA;AACA;AACA,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;AACA;EACEC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,OAAO,MAAMH,GAAG,CAACI,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EACnD,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEE,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,OAAO,MAAMP,GAAG,CAACI,IAAI,CAAC,aAAa,EAAE;MAAEE,KAAK;MAAEC;IAAS,CAAC,CAAC;EAC3D,CAAC;EAED;AACF;AACA;AACA;EACEC,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,OAAO,MAAMR,GAAG,CAACS,GAAG,CAAC,cAAc,CAAC;EACtC,CAAC;EAED;AACF;AACA;AACA;EACEC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,OAAO,MAAMV,GAAG,CAACS,GAAG,CAAC,UAAU,CAAC;EAClC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,aAAa,EAAE,MAAOR,QAAQ,IAAK;IACjC,OAAO,MAAMH,GAAG,CAACY,GAAG,CAAC,qBAAqB,EAAET,QAAQ,CAAC;EACvD,CAAC;EAED;AACF;AACA;AACA;AACA;EACEU,cAAc,EAAE,MAAOC,YAAY,IAAK;IACtC,OAAO,MAAMd,GAAG,CAACY,GAAG,CAAC,sBAAsB,EAAEE,YAAY,CAAC;EAC5D,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,cAAc,EAAE,MAAOT,KAAK,IAAK;IAC/B,OAAO,MAAMN,GAAG,CAACI,IAAI,CAAC,sBAAsB,EAAE;MAAEE;IAAM,CAAC,CAAC;EAC1D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEU,aAAa,EAAE,MAAAA,CAAOC,KAAK,EAAEV,QAAQ,KAAK;IACxC,OAAO,MAAMP,GAAG,CAACY,GAAG,CAAC,uBAAuBK,KAAK,EAAE,EAAE;MAAEV;IAAS,CAAC,CAAC;EACpE;AACF,CAAC;AAED,eAAeN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}
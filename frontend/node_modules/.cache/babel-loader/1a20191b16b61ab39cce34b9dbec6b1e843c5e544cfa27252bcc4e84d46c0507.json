{"ast":null,"code":"import api from './api';\n\n/**\n * Service for task related API calls\n */\nconst taskService = {\n  /**\n   * Get all tasks with optional filters\n   * @param {Object} filters - Optional filters for tasks\n   * @returns {Promise<Array>} List of tasks\n   */\n  getTasks: async (filters = {}) => {\n    const queryParams = new URLSearchParams();\n\n    // Add filters to query params\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        queryParams.append(key, value);\n      }\n    });\n    const queryString = queryParams.toString();\n    const url = queryString ? `/tasks?${queryString}` : '/tasks';\n    return await api.get(url);\n  },\n  /**\n   * Get tasks by project\n   * @param {string} projectId - Project ID\n   * @returns {Promise<Array>} List of tasks\n   */\n  getTasksByProject: async projectId => {\n    return await api.get(`/tasks/project/${projectId}`);\n  },\n  /**\n   * Get tasks by user\n   * @param {string} userId - User ID\n   * @returns {Promise<Array>} List of tasks\n   */\n  getTasksByUser: async userId => {\n    return await api.get(`/tasks/user/${userId}`);\n  },\n  /**\n   * Get a specific task by ID\n   * @param {string} taskId - Task ID\n   * @returns {Promise<Object>} Task data\n   */\n  getTask: async taskId => {\n    return await api.get(`/tasks/${taskId}`);\n  },\n  /**\n   * Create a new task\n   * @param {Object} taskData - Task data\n   * @returns {Promise<Object>} Created task\n   */\n  createTask: async taskData => {\n    return await api.post('/tasks', taskData);\n  },\n  /**\n   * Update a task\n   * @param {string} taskId - Task ID\n   * @param {Object} taskData - Updated task data\n   * @returns {Promise<Object>} Updated task\n   */\n  updateTask: async (taskId, taskData) => {\n    return await api.put(`/tasks/${taskId}`, taskData);\n  },\n  /**\n   * Delete a task\n   * @param {string} taskId - Task ID\n   * @returns {Promise<Object>} Success message\n   */\n  deleteTask: async taskId => {\n    return await api.delete(`/tasks/${taskId}`);\n  },\n  /**\n   * Add a comment to a task\n   * @param {string} taskId - Task ID\n   * @param {Object} comment - Comment data\n   * @returns {Promise<Object>} Updated task\n   */\n  addComment: async (taskId, comment) => {\n    return await api.post(`/tasks/${taskId}/comments`, {\n      text: comment\n    });\n  },\n  /**\n   * Upload an attachment to a task\n   * @param {string} taskId - Task ID\n   * @param {File} file - File to upload\n   * @returns {Promise<Object>} Updated task\n   */\n  uploadAttachment: async (taskId, file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Special config to handle form data\n    return await api.post(`/tasks/${taskId}/attachments`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  /**\n   * Delete an attachment from a task\n   * @param {string} taskId - Task ID\n   * @param {string} attachmentId - Attachment ID\n   * @returns {Promise<Object>} Updated task\n   */\n  deleteAttachment: async (taskId, attachmentId) => {\n    return await api.delete(`/tasks/${taskId}/attachments/${attachmentId}`);\n  }\n};\nexport default taskService;","map":{"version":3,"names":["api","taskService","getTasks","filters","queryParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","queryString","toString","url","get","getTasksByProject","projectId","getTasksByUser","userId","getTask","taskId","createTask","taskData","post","updateTask","put","deleteTask","delete","addComment","comment","text","uploadAttachment","file","formData","FormData","headers","deleteAttachment","attachmentId"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/services/taskService.js"],"sourcesContent":["import api from './api';\n\n/**\n * Service for task related API calls\n */\nconst taskService = {\n    /**\n     * Get all tasks with optional filters\n     * @param {Object} filters - Optional filters for tasks\n     * @returns {Promise<Array>} List of tasks\n     */\n    getTasks: async (filters = {}) => {\n        const queryParams = new URLSearchParams();\n\n        // Add filters to query params\n        Object.entries(filters).forEach(([key, value]) => {\n            if (value !== undefined && value !== null) {\n                queryParams.append(key, value);\n            }\n        });\n\n        const queryString = queryParams.toString();\n        const url = queryString ? `/tasks?${queryString}` : '/tasks';\n\n        return await api.get(url);\n    },\n\n    /**\n     * Get tasks by project\n     * @param {string} projectId - Project ID\n     * @returns {Promise<Array>} List of tasks\n     */\n    getTasksByProject: async (projectId) => {\n        return await api.get(`/tasks/project/${projectId}`);\n    },\n\n    /**\n     * Get tasks by user\n     * @param {string} userId - User ID\n     * @returns {Promise<Array>} List of tasks\n     */\n    getTasksByUser: async (userId) => {\n        return await api.get(`/tasks/user/${userId}`);\n    },\n\n    /**\n     * Get a specific task by ID\n     * @param {string} taskId - Task ID\n     * @returns {Promise<Object>} Task data\n     */\n    getTask: async (taskId) => {\n        return await api.get(`/tasks/${taskId}`);\n    },\n\n    /**\n     * Create a new task\n     * @param {Object} taskData - Task data\n     * @returns {Promise<Object>} Created task\n     */\n    createTask: async (taskData) => {\n        return await api.post('/tasks', taskData);\n    },\n\n    /**\n     * Update a task\n     * @param {string} taskId - Task ID\n     * @param {Object} taskData - Updated task data\n     * @returns {Promise<Object>} Updated task\n     */\n    updateTask: async (taskId, taskData) => {\n        return await api.put(`/tasks/${taskId}`, taskData);\n    },\n\n    /**\n     * Delete a task\n     * @param {string} taskId - Task ID\n     * @returns {Promise<Object>} Success message\n     */\n    deleteTask: async (taskId) => {\n        return await api.delete(`/tasks/${taskId}`);\n    },\n\n    /**\n     * Add a comment to a task\n     * @param {string} taskId - Task ID\n     * @param {Object} comment - Comment data\n     * @returns {Promise<Object>} Updated task\n     */\n    addComment: async (taskId, comment) => {\n        return await api.post(`/tasks/${taskId}/comments`, { text: comment });\n    },\n\n    /**\n     * Upload an attachment to a task\n     * @param {string} taskId - Task ID\n     * @param {File} file - File to upload\n     * @returns {Promise<Object>} Updated task\n     */\n    uploadAttachment: async (taskId, file) => {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        // Special config to handle form data\n        return await api.post(`/tasks/${taskId}/attachments`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n    },\n\n    /**\n     * Delete an attachment from a task\n     * @param {string} taskId - Task ID\n     * @param {string} attachmentId - Attachment ID\n     * @returns {Promise<Object>} Updated task\n     */\n    deleteAttachment: async (taskId, attachmentId) => {\n        return await api.delete(`/tasks/${taskId}/attachments/${attachmentId}`);\n    }\n};\n\nexport default taskService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
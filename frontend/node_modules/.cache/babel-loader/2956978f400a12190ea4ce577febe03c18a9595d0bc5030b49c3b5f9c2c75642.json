{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Task Management System\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport authService from '../services/authService';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on component mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  // Check if user is already logged in\n  const checkAuthStatus = useCallback(async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      const userData = await authService.getCurrentUser();\n      setUser(userData);\n    } catch (error) {\n      console.error('Authentication check failed:', error);\n      localStorage.removeItem('token');\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Login user\n  const login = useCallback(async (email, password) => {\n    try {\n      setLoading(true);\n      console.log('Attempting login with:', {\n        email\n      });\n      const response = await authService.login(email, password);\n      console.log('Login response in context:', response);\n\n      // Check if we have a valid user with token\n      if (!response || !response.token) {\n        throw new Error('Invalid response from server');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', response.token);\n\n      // Set user in state\n      setUser(response);\n      toast.success('Successfully logged in!');\n      navigate('/dashboard');\n      return true;\n    } catch (error) {\n      console.error('Login failed:', error);\n      let errorMessage = 'Login failed. Please try again.';\n      if (error.message) {\n        errorMessage = error.message;\n      }\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Register user\n  const register = useCallback(async userData => {\n    try {\n      setLoading(true);\n      console.log('Attempting registration with:', {\n        email: userData.email\n      });\n      const response = await authService.register(userData);\n      console.log('Registration response in context:', response);\n\n      // Check if we have a valid user with token\n      if (!response || !response.token) {\n        throw new Error('Invalid response from server');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', response.token);\n\n      // Set user in state\n      setUser(response);\n      toast.success('Registration successful!');\n      navigate('/dashboard');\n      return true;\n    } catch (error) {\n      console.error('Registration failed:', error);\n      let errorMessage = 'Registration failed. Please try again.';\n      if (error.message) {\n        errorMessage = error.message;\n      }\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Logout user\n  const logout = useCallback(async () => {\n    try {\n      setLoading(true);\n      await authService.logout();\n\n      // Remove token from localStorage\n      localStorage.removeItem('token');\n\n      // Clear user from state\n      setUser(null);\n      toast.success('Successfully logged out!');\n      navigate('/login');\n    } catch (error) {\n      console.error('Logout failed:', error);\n      // Force logout on client side even if API call fails\n      localStorage.removeItem('token');\n      setUser(null);\n      navigate('/login');\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Update user profile\n  const updateProfile = useCallback(async userData => {\n    try {\n      setLoading(true);\n      const updatedUser = await authService.updateProfile(userData);\n      setUser(prevUser => ({\n        ...prevUser,\n        ...updatedUser\n      }));\n      toast.success('Profile updated successfully!');\n      return true;\n    } catch (error) {\n      console.error('Profile update failed:', error);\n      toast.error(error.message || 'Failed to update profile. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Update password\n  const updatePassword = useCallback(async passwordData => {\n    try {\n      setLoading(true);\n      await authService.updatePassword(passwordData);\n      toast.success('Password updated successfully!');\n      return true;\n    } catch (error) {\n      console.error('Password update failed:', error);\n      toast.error(error.message || 'Failed to update password. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Memoize context value\n  const contextValue = useMemo(() => ({\n    user,\n    loading,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    checkAuthStatus,\n    updateProfile,\n    updatePassword\n  }), [user, loading, login, register, logout, checkAuthStatus, updateProfile, updatePassword]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"++1yeTBcy3lEvs0/PTgfVsnXkrw=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useMemo","useEffect","useNavigate","toast","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","navigate","checkAuthStatus","token","localStorage","getItem","userData","getCurrentUser","error","console","removeItem","login","email","password","log","response","Error","setItem","success","errorMessage","message","register","logout","updateProfile","updatedUser","prevUser","updatePassword","passwordData","contextValue","isAuthenticated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport authService from '../services/authService';\r\n\r\n// Create context\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    // Check if user is already logged in on component mount\r\n    useEffect(() => {\r\n        checkAuthStatus();\r\n    }, []);\r\n\r\n    // Check if user is already logged in\r\n    const checkAuthStatus = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            const token = localStorage.getItem('token');\r\n\r\n            if (!token) {\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            const userData = await authService.getCurrentUser();\r\n            setUser(userData);\r\n        } catch (error) {\r\n            console.error('Authentication check failed:', error);\r\n            localStorage.removeItem('token');\r\n            setUser(null);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Login user\r\n    const login = useCallback(async (email, password) => {\r\n        try {\r\n            setLoading(true);\r\n            console.log('Attempting login with:', { email });\r\n\r\n            const response = await authService.login(email, password);\r\n            console.log('Login response in context:', response);\r\n\r\n            // Check if we have a valid user with token\r\n            if (!response || !response.token) {\r\n                throw new Error('Invalid response from server');\r\n            }\r\n\r\n            // Store token in localStorage\r\n            localStorage.setItem('token', response.token);\r\n\r\n            // Set user in state\r\n            setUser(response);\r\n\r\n            toast.success('Successfully logged in!');\r\n            navigate('/dashboard');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Login failed:', error);\r\n            let errorMessage = 'Login failed. Please try again.';\r\n\r\n            if (error.message) {\r\n                errorMessage = error.message;\r\n            }\r\n\r\n            toast.error(errorMessage);\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Register user\r\n    const register = useCallback(async (userData) => {\r\n        try {\r\n            setLoading(true);\r\n            console.log('Attempting registration with:', { email: userData.email });\r\n\r\n            const response = await authService.register(userData);\r\n            console.log('Registration response in context:', response);\r\n\r\n            // Check if we have a valid user with token\r\n            if (!response || !response.token) {\r\n                throw new Error('Invalid response from server');\r\n            }\r\n\r\n            // Store token in localStorage\r\n            localStorage.setItem('token', response.token);\r\n\r\n            // Set user in state\r\n            setUser(response);\r\n\r\n            toast.success('Registration successful!');\r\n            navigate('/dashboard');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Registration failed:', error);\r\n            let errorMessage = 'Registration failed. Please try again.';\r\n\r\n            if (error.message) {\r\n                errorMessage = error.message;\r\n            }\r\n\r\n            toast.error(errorMessage);\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Logout user\r\n    const logout = useCallback(async () => {\r\n        try {\r\n            setLoading(true);\r\n            await authService.logout();\r\n\r\n            // Remove token from localStorage\r\n            localStorage.removeItem('token');\r\n\r\n            // Clear user from state\r\n            setUser(null);\r\n\r\n            toast.success('Successfully logged out!');\r\n            navigate('/login');\r\n        } catch (error) {\r\n            console.error('Logout failed:', error);\r\n            // Force logout on client side even if API call fails\r\n            localStorage.removeItem('token');\r\n            setUser(null);\r\n            navigate('/login');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Update user profile\r\n    const updateProfile = useCallback(async (userData) => {\r\n        try {\r\n            setLoading(true);\r\n            const updatedUser = await authService.updateProfile(userData);\r\n            setUser(prevUser => ({ ...prevUser, ...updatedUser }));\r\n            toast.success('Profile updated successfully!');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Profile update failed:', error);\r\n            toast.error(error.message || 'Failed to update profile. Please try again.');\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Update password\r\n    const updatePassword = useCallback(async (passwordData) => {\r\n        try {\r\n            setLoading(true);\r\n            await authService.updatePassword(passwordData);\r\n            toast.success('Password updated successfully!');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Password update failed:', error);\r\n            toast.error(error.message || 'Failed to update password. Please try again.');\r\n            return false;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // Memoize context value\r\n    const contextValue = useMemo(() => ({\r\n        user,\r\n        loading,\r\n        isAuthenticated: !!user,\r\n        login,\r\n        register,\r\n        logout,\r\n        checkAuthStatus,\r\n        updateProfile,\r\n        updatePassword\r\n    }), [user, loading, login, register, logout, checkAuthStatus, updateProfile, updatePassword]);\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
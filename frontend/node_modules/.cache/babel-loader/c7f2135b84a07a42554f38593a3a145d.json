{"ast":null,"code":"import { useCallback, useRef, useEffect } from 'react';\n\n/**\r\n * Custom hook for task-related performance optimizations\r\n * Provides memoization, debouncing, and other performance enhancements\r\n */\nconst useTaskOptimizations = () => {\n  // Cached tasks by projectId\n  const taskCache = useRef(new Map());\n  // Debounce timers\n  const debounceTimers = useRef({});\n\n  /**\r\n   * Debounce a function call\r\n   * @param {Function} fn - Function to debounce\r\n   * @param {string} key - Unique identifier for this debounce\r\n   * @param {number} delay - Delay in milliseconds\r\n   * @returns {Function} - Debounced function\r\n   */\n  const debounce = useCallback((fn, key, delay = 300) => {\n    return (...args) => {\n      // Clear existing timer for this key\n      if (debounceTimers.current[key]) {\n        clearTimeout(debounceTimers.current[key]);\n      }\n\n      // Set new timer\n      debounceTimers.current[key] = setTimeout(() => {\n        fn(...args);\n        delete debounceTimers.current[key];\n      }, delay);\n    };\n  }, []);\n\n  /**\r\n   * Store tasks in cache by project ID\r\n   * @param {string} projectId - Project ID\r\n   * @param {Array} tasks - Tasks to cache\r\n   */\n  const cacheTasks = useCallback((projectId, tasks) => {\n    if (projectId && Array.isArray(tasks)) {\n      taskCache.current.set(projectId, {\n        data: tasks,\n        timestamp: Date.now()\n      });\n    }\n  }, []);\n\n  /**\r\n   * Get tasks from cache if available and not expired\r\n   * @param {string} projectId - Project ID\r\n   * @param {number} maxAge - Maximum age of cache in milliseconds\r\n   * @returns {Array|null} - Cached tasks or null if cache miss\r\n   */\n  const getCachedTasks = useCallback((projectId, maxAge = 30000) => {\n    const cached = taskCache.current.get(projectId);\n    if (cached && Date.now() - cached.timestamp < maxAge) {\n      return cached.data;\n    }\n    return null;\n  }, []);\n\n  // Clear cache when component unmounts\n  useEffect(() => {\n    return () => {\n      // Clear all debounce timers\n      Object.keys(debounceTimers.current).forEach(key => {\n        clearTimeout(debounceTimers.current[key]);\n      });\n    };\n  }, []);\n  return {\n    debounce,\n    cacheTasks,\n    getCachedTasks\n  };\n};\nexport default useTaskOptimizations;","map":{"version":3,"names":["useCallback","useRef","useEffect","useTaskOptimizations","taskCache","Map","debounceTimers","debounce","fn","key","delay","args","current","clearTimeout","setTimeout","cacheTasks","projectId","tasks","Array","isArray","set","data","timestamp","Date","now","getCachedTasks","maxAge","cached","get","Object","keys","forEach"],"sources":["C:/Users/Admin/Downloads/Task Management System/frontend/src/hooks/useTaskOptimizations.js"],"sourcesContent":["import { useCallback, useRef, useEffect } from 'react';\r\n\r\n/**\r\n * Custom hook for task-related performance optimizations\r\n * Provides memoization, debouncing, and other performance enhancements\r\n */\r\nconst useTaskOptimizations = () => {\r\n    // Cached tasks by projectId\r\n    const taskCache = useRef(new Map());\r\n    // Debounce timers\r\n    const debounceTimers = useRef({});\r\n\r\n    /**\r\n     * Debounce a function call\r\n     * @param {Function} fn - Function to debounce\r\n     * @param {string} key - Unique identifier for this debounce\r\n     * @param {number} delay - Delay in milliseconds\r\n     * @returns {Function} - Debounced function\r\n     */\r\n    const debounce = useCallback((fn, key, delay = 300) => {\r\n        return (...args) => {\r\n            // Clear existing timer for this key\r\n            if (debounceTimers.current[key]) {\r\n                clearTimeout(debounceTimers.current[key]);\r\n            }\r\n\r\n            // Set new timer\r\n            debounceTimers.current[key] = setTimeout(() => {\r\n                fn(...args);\r\n                delete debounceTimers.current[key];\r\n            }, delay);\r\n        };\r\n    }, []);\r\n\r\n    /**\r\n     * Store tasks in cache by project ID\r\n     * @param {string} projectId - Project ID\r\n     * @param {Array} tasks - Tasks to cache\r\n     */\r\n    const cacheTasks = useCallback((projectId, tasks) => {\r\n        if (projectId && Array.isArray(tasks)) {\r\n            taskCache.current.set(projectId, {\r\n                data: tasks,\r\n                timestamp: Date.now()\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    /**\r\n     * Get tasks from cache if available and not expired\r\n     * @param {string} projectId - Project ID\r\n     * @param {number} maxAge - Maximum age of cache in milliseconds\r\n     * @returns {Array|null} - Cached tasks or null if cache miss\r\n     */\r\n    const getCachedTasks = useCallback((projectId, maxAge = 30000) => {\r\n        const cached = taskCache.current.get(projectId);\r\n\r\n        if (cached && (Date.now() - cached.timestamp < maxAge)) {\r\n            return cached.data;\r\n        }\r\n\r\n        return null;\r\n    }, []);\r\n\r\n    // Clear cache when component unmounts\r\n    useEffect(() => {\r\n        return () => {\r\n            // Clear all debounce timers\r\n            Object.keys(debounceTimers.current).forEach(key => {\r\n                clearTimeout(debounceTimers.current[key]);\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    return {\r\n        debounce,\r\n        cacheTasks,\r\n        getCachedTasks\r\n    };\r\n};\r\n\r\nexport default useTaskOptimizations; "],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;;AAEtD;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAC/B;EACA,MAAMC,SAAS,GAAGH,MAAM,CAAC,IAAII,GAAG,CAAC,CAAC,CAAC;EACnC;EACA,MAAMC,cAAc,GAAGL,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEjC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMM,QAAQ,GAAGP,WAAW,CAAC,CAACQ,EAAE,EAAEC,GAAG,EAAEC,KAAK,GAAG,GAAG,KAAK;IACnD,OAAO,CAAC,GAAGC,IAAI,KAAK;MAChB;MACA,IAAIL,cAAc,CAACM,OAAO,CAACH,GAAG,CAAC,EAAE;QAC7BI,YAAY,CAACP,cAAc,CAACM,OAAO,CAACH,GAAG,CAAC,CAAC;MAC7C;;MAEA;MACAH,cAAc,CAACM,OAAO,CAACH,GAAG,CAAC,GAAGK,UAAU,CAAC,MAAM;QAC3CN,EAAE,CAAC,GAAGG,IAAI,CAAC;QACX,OAAOL,cAAc,CAACM,OAAO,CAACH,GAAG,CAAC;MACtC,CAAC,EAAEC,KAAK,CAAC;IACb,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEN;AACJ;AACA;AACA;AACA;EACI,MAAMK,UAAU,GAAGf,WAAW,CAAC,CAACgB,SAAS,EAAEC,KAAK,KAAK;IACjD,IAAID,SAAS,IAAIE,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MACnCb,SAAS,CAACQ,OAAO,CAACQ,GAAG,CAACJ,SAAS,EAAE;QAC7BK,IAAI,EAAEJ,KAAK;QACXK,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACxB,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,cAAc,GAAGzB,WAAW,CAAC,CAACgB,SAAS,EAAEU,MAAM,GAAG,KAAK,KAAK;IAC9D,MAAMC,MAAM,GAAGvB,SAAS,CAACQ,OAAO,CAACgB,GAAG,CAACZ,SAAS,CAAC;IAE/C,IAAIW,MAAM,IAAKJ,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGG,MAAM,CAACL,SAAS,GAAGI,MAAO,EAAE;MACpD,OAAOC,MAAM,CAACN,IAAI;IACtB;IAEA,OAAO,IAAI;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAnB,SAAS,CAAC,MAAM;IACZ,OAAO,MAAM;MACT;MACA2B,MAAM,CAACC,IAAI,CAACxB,cAAc,CAACM,OAAO,CAAC,CAACmB,OAAO,CAACtB,GAAG,IAAI;QAC/CI,YAAY,CAACP,cAAc,CAACM,OAAO,CAACH,GAAG,CAAC,CAAC;MAC7C,CAAC,CAAC;IACN,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACHF,QAAQ;IACRQ,UAAU;IACVU;EACJ,CAAC;AACL,CAAC;AAED,eAAetB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module"}